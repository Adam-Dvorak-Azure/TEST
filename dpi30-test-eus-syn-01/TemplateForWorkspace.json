{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dpi30-test-eus-syn-01\\"
		},
		"dpi30-test-eus-syn-01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dpi30-test-eus-syn-01-WorkspaceDefaultSqlServer'"
		},
		"RawZone_DataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'RawZone_DataLakeStorage1'"
		},
		"EnhancedZone_DataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'EnhancedZone_DataLakeStorage2'"
		},
		"CuratedZone_DataLakeStorage3_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'CuratedZone_DataLakeStorage3'"
		},
		"Marketo1_clientSecret": {
			"type": "secureString",
			"metadata": "Secure string for 'clientSecret' of 'Marketo1'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"AzureBlobStorage2_Test_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2_Test'"
		},
		"AzureDataLakeStorage1_Test_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1_Test'"
		},
		"Db21_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Db21'"
		},
		"AzureDataLakeStorageDatamonksTest_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageDatamonksTest'"
		},
		"DatamonksS3DevPvc_secretAccessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'secretAccessKey' of 'DatamonksS3DevPvc'"
		},
		"Azuretestblobstorage_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'Azuretestblobstorage'"
		},
		"test_sa_container_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'test_sa_container'"
		},
		"TkgenMonksTest_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'TkgenMonksTest'"
		},
		"ON_ODB2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ON_ODB2'"
		},
		"Db22_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Db22'"
		},
		"DB2 TEST_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DB2 TEST'"
		},
		"GitHub1_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub1'"
		},
		"NvdBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'NvdBlob'"
		},
		"Connection to catalyst_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Connection to catalyst'"
		},
		"TRAILS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TRAILS'"
		},
		"bludb_jdbc_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'bludb_jdbc_connection'"
		},
		"AzureFunction1_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction1'"
		},
		"MedalliaData_Zoran_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'MedalliaData_Zoran'"
		},
		"MedalliaDataCZ_Zoran_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'MedalliaDataCZ_Zoran'"
		},
		"AdamDvorakDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AdamDvorakDB'"
		},
		"dpi30testeusdlsacz03_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dpi30testeusdlsacz03'"
		},
		"dpi30testeusdlsacz03_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dpi30testeusdlsacz03_blob'"
		},
		"dpi30-test-eus-syn-01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsarz01.dfs.core.windows.net"
		},
		"RawZone_DataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsarz01.dfs.core.windows.net"
		},
		"EnhancedZone_DataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsaez02.dfs.core.windows.net"
		},
		"CuratedZone_DataLakeStorage3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsacz03.dfs.core.windows.net"
		},
		"Mockaroo_Users_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://my.api.mockaroo.com/users.json?key=c72d8e90"
		},
		"Marketo1_properties_typeProperties_clientId": {
			"type": "string",
			"defaultValue": "a8c1348b-d3a0-456f-beb4-0d00ab88d8d8"
		},
		"AzureDataLakeStorage1_Test_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsarz01.dfs.core.windows.net/"
		},
		"AzureDataLakeStorageDatamonksTest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsarz01.dfs.core.windows.net"
		},
		"DatamonksS3DevPvc_properties_typeProperties_accessKeyId": {
			"type": "string",
			"defaultValue": "04a0d7c5f2d9481a84cee7078fbe4599"
		},
		"Azuretestblobstorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsatest02.blob.core.windows.net"
		},
		"Azuretestblobstorage_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "d1c719f7-cc48-4f9f-83ec-f706a2a940fe"
		},
		"Azuretestblobstorage_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "ff031354-9bb6-43f7-9487-e62da4d3bbd6"
		},
		"test_sa_container_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsatest02.dfs.core.windows.net"
		},
		"test_sa_container_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "d1c719f7-cc48-4f9f-83ec-f706a2a940fe"
		},
		"test_sa_container_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "ff031354-9bb6-43f7-9487-e62da4d3bbd6"
		},
		"TkgenMonksTest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://k8s-pricing-dev-a19fe168445bd781eeb95cecb0df6e59-0000.us-south.containers.appdomain.cloud/generateToken"
		},
		"TkgenMonksTest_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Sreepada.Jayanthi@kyndryl.com"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://worldtimeapi.org/api/timezone/asia/Kolkata"
		},
		"AMETLAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://158.87.52.49:9081/api/sam/about"
		},
		"GitHub1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "sachins301"
		},
		"AzureFunction1_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://michal-test-app.azurewebsites.net"
		},
		"MedalliaData_Zoran_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsarz01.dfs.core.windows.net"
		},
		"MedalliaDataCZ_Zoran_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpi30testeusdlsarz01.dfs.core.windows.net"
		},
		"AzureMLService1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "a802af10-3082-4ea6-b3db-542043a41e96"
		},
		"AzureMLService1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "rg-dpi30-test-eus-001"
		},
		"AzureKeyVaultMonks_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dpi30-test-eus-kv-01.vault.azure.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30dj')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "scala",
				"jobProperties": {
					"name": "dpi30dj",
					"file": "abfss://dpi30testeusdlsafsrz01@dpi30testeusdlsarz01.dfs.core.windows.net/synapse/workspaces/dpi30-test-eus-syn-01/batchjobs/Spark%20job%20definition%201/helloworld_deploy.jar",
					"className": "studentperforance.Student",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f8fa563d-5517-4387-97e4-7db4de9eec16"
					},
					"args": [],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30sparkjob2')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testdj"
				},
				"targetBigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "scala",
				"jobProperties": {
					"name": "dpi30sparkjob2",
					"file": "abfss://rz-container@dpi30testeusdlsarz01.dfs.core.windows.net/Pricing/dj_test/SparkTest.jar",
					"className": "src.main.scala.com.kyndryl.cpa.integration.dimensions.test.Test",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b01d96b7-6a46-476b-a6e9-72f443dd4945"
					},
					"args": [],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30nonsparkjob')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testdj"
				},
				"targetBigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "scala",
				"jobProperties": {
					"name": "dpi30nonsparkjob",
					"file": "abfss://rz-container@dpi30testeusdlsarz01.dfs.core.windows.net/Pricing/dj_test/NonSparktest.jar",
					"className": "src.main.scala.com.kyndryl.test.Test",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bd2a2032-5bbb-4813-b48f-7a2d989b1bd4"
					},
					"args": [],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DependencyTest')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testdj"
				},
				"targetBigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "scala",
				"jobProperties": {
					"name": "DependencyTest",
					"file": "abfss://rz-container@dpi30testeusdlsarz01.dfs.core.windows.net/Pricing/dj_test/jsontest_deploy.jar",
					"className": "src.main.scala.com.kyndryl.cpa.landing.jsonparser.JsonParserTest",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4383f497-8bf2-49fc-9e1c-fafac469782d"
					},
					"args": [],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/from_tutorial')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-job-definitions",
				"folder": {
					"name": "michal"
				},
				"targetBigDataPool": {
					"referenceName": "ETLChapterSPool",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "from_tutorial",
					"file": "abfss://dpi30testeusdlsacz03@dpi30testeusdlsacz03.dfs.core.windows.net/michal/wordcount.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "0cf57a79-980d-4db7-b11f-02f0b352a3f4"
					},
					"args": [],
					"jars": [],
					"pyFiles": [
						"abfss://dpi30testeusdlsacz03@dpi30testeusdlsacz03.dfs.core.windows.net/michal/shakespeare.py",
						"abfss://dpi30testeusdlsacz03@dpi30testeusdlsacz03.dfs.core.windows.net/michal/result.py"
					],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pysparktest')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "kk"
				},
				"targetBigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "pysparktest",
					"file": "abfss://dpi30testeusdlsafsrz01@dpi30testeusdlsarz01.dfs.core.windows.net/synapse/workspaces/dpi30-test-eus-syn-01/batchjobs/pysparktest/wordcount.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e53b9a2a-8cae-444b-96eb-4d9e0167b694"
					},
					"args": [
						"abfss://rz-container@dpi30testeusdlsarz01.dfs.core.windows.net/Pricing/kk_test/shakespeare.txt"
					],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/simpletest1_SQL_script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "insert into dbo.emp (FirstName, LastName) values ('bond','pang'); ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dpi30testeusdsqlp01",
						"poolName": "dpi30testeusdsqlp01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.dfs.core.windows.net/dpi30testeusdlsafsrz01/NYCTripSmall.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 2 *\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.dfs.core.windows.net/medallia-data/medllia_data.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dpi30testeusdsqlp01",
						"poolName": "dpi30testeusdsqlp01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dj_DataSet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"content": {
					"query": "\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.blob.core.windows.net/rz-container/Pricing/dj_test/userdata2.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nwhere gender ='Male'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AllFiles')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.blob.core.windows.net/rz-container/Pricing/dj_test/*',\n        FORMAT = 'PARQUET'\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/REad Json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT TOP 100\n    jsonContent\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.dfs.core.windows.net/rz-container/Pricing/dj_test/Result/userdata2.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Select * from dbo.emp;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dpi30testeusdsqlp01",
						"poolName": "dpi30testeusdsqlp01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE USER Sreepada.Jayanthi@kyndryl.onmicrosoft.com\n\tWITHOUT LOGIN\n\tWITH DEFAULT_SCHEMA = dbo;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dpi30testeusdsqlp01",
						"poolName": "dpi30testeusdsqlp01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 8')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.dfs.core.windows.net/rz-container/Pricing/dj_test/userdata2.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dpi30testeusdlsarz01.dfs.core.windows.net/rz-container/Asset-Management/MLDB_HW_INFO.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n    SELECT TOP 100 *\n     FROM\nOPENROWSET( BULK 'https://dpi30testeusdlsarz01.dfs.core.windows.net/rz-container/Asset-Management/MLDB_HW_INFO.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0' ) AS nyc GROUP BY nyc.filename();",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dpi30testeusdsqlp01",
						"poolName": "dpi30testeusdsqlp01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TRAILS Status Overview')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT count(1), eis.status AS isw_status , sw.status AS sw_status, swl.status AS swl_status, hwl.status AS hwl_status, LEVEL,\n\nhw.status AS hw_status, cus.status AS cus_status, CUS.SW_LICENSE_MGMT AS CUS_SW_LICENSE_MGMT\n\nFROM TRAILS_TRAILS.EAADMIN_INSTALLED_SOFTWARE eis\n\nJOIN trails_trails.EAADMIN_SOFTWARE sw ON eis.software_id=sw.SOFTWARE_ID --AND LEVEL = 'LICENSABLE'\nJOIN trails_trails.EAADMIN_SOFTWARE_LPAR swl ON eis.software_lpar_id=swl.id\nJOIN TRAILS_TRAILS.EAADMIN_HW_SW_COMPOSITE HWSWC ON (SWL.ID = HWSWC.SOFTWARE_LPAR_ID)\nJOIN TRAILS_TRAILS.EAADMIN_HARDWARE_LPAR HWL     ON (HWL.ID = HWSWC.HARDWARE_LPAR_ID)\nJOIN TRAILS_TRAILS.EAADMIN_HARDWARE HW           ON (HW.ID = HWL.HARDWARE_ID)   \nJOIN TRAILS_TRAILS.EAADMIN_CUSTOMER_NEW CUS \t      ON (SWL.CUSTOMER_ID = CUS.CUSTOMER_ID) -- AND CUS.STATUS = 'ACTIVE' AND CUS.SW_LICENSE_MGMT = 'YES')\n\n\n--JOIN TRAILS_TRAILS.EAADMIN_CUSTOMER CUS \t      ON (SWL.CUSTOMER_ID = CUS.CUSTOMER_ID  AND CUS.STATUS = 'ACTIVE' AND CUS.SW_LICENSE_MGMT = 'YES')\n--JOIN TRAILS_TRAILS.EAADMIN_MANUFACTURER SWM      ON (SWC.MANUFACTURER_ID = SWM.ID)\n--JOIN TRAILS_TRAILS.EAADMIN_MACHINE_TYPE MT       ON (MT.ID = HW.MACHINE_TYPE_ID)\n\n GROUP BY eis.status, LEVEL , swl.status,sw.status, hwl.status, hw.status , cus.status , CUS.SW_LICENSE_MGMT\n \nORDER by eis.status, swl.status,sw.status, hwl.status, hw.status, LEVEL , cus.status , CUS.SW_LICENSE_MGMT",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "AdamDvorak",
						"poolName": "AdamDvorak"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 10')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select * from dbo.emp",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dpi30testeusdsqlp01",
						"poolName": "dpi30testeusdsqlp01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30-test-eus-syn-01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dpi30-test-eus-syn-01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30-test-eus-syn-01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dpi30-test-eus-syn-01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RawZone_DataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Raw Zone storage",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('RawZone_DataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('RawZone_DataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EnhancedZone_DataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('EnhancedZone_DataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('EnhancedZone_DataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CuratedZone_DataLakeStorage3')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('CuratedZone_DataLakeStorage3_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('CuratedZone_DataLakeStorage3_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Mockaroo_Users')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Mockaroo_Users_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Marketo1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Marketo",
				"typeProperties": {
					"endpoint": "https://198-VSI-157.mktorest.com",
					"clientId": "[parameters('Marketo1_properties_typeProperties_clientId')]",
					"clientSecret": {
						"type": "SecureString",
						"value": "[parameters('Marketo1_clientSecret')]"
					},
					"useEncryptedEndpoints": true,
					"useHostVerification": true,
					"usePeerVerification": true
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage2_Test')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_Test_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1_Test')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_Test_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_Test_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Db21')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('Db21_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorageDatamonksTest')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageDatamonksTest_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageDatamonksTest_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DatamonksS3DevPvc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AmazonS3Compatible",
				"typeProperties": {
					"serviceUrl": "https://s3.us-south.cloud-object-storage.appdomain.cloud",
					"accessKeyId": "[parameters('DatamonksS3DevPvc_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "SecureString",
						"value": "[parameters('DatamonksS3DevPvc_secretAccessKey')]"
					},
					"forcePathStyle": false
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Azuretestblobstorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('Azuretestblobstorage_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('Azuretestblobstorage_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('Azuretestblobstorage_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('Azuretestblobstorage_servicePrincipalKey')]"
					},
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test_sa_container')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('test_sa_container_properties_typeProperties_url')]",
					"tenant": "[parameters('test_sa_container_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('test_sa_container_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('test_sa_container_servicePrincipalCredential')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TkgenMonksTest')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('TkgenMonksTest_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('TkgenMonksTest_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('TkgenMonksTest_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ON_ODB2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('ON_ODB2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Db22')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('Db22_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMETLAPI')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('AMETLAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DB2 TEST')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('DB2 TEST_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GitHub1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub1_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub1_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIlNZTkFQU0VAMUQ2NTQ5RTAtNEI3RC00OUYxLTg3MzYtNjMwMEU1QUY5QjhEX2UxNzM3ZGQ2LWY1NDAtNDMwYS1hNGZjLTQyNmZlMTljZjI0YSINCn0="
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NvdBlob')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Blob storage containing data from the NVD",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('NvdBlob_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Connection to catalyst')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('Connection to catalyst_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TRAILS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('TRAILS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bludb_jdbc_connection')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('bludb_jdbc_connection_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureFunction1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction1_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction1_functionKey')]"
					},
					"authentication": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MedalliaData_Zoran')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('MedalliaData_Zoran_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('MedalliaData_Zoran_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MedalliaDataCZ_Zoran')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "copy to CZ",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('MedalliaDataCZ_Zoran_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('MedalliaDataCZ_Zoran_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "dpi30-test-eus-ml-01",
					"authentication": "MSI"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdamDvorakDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AdamDvorakDB_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVaultMonks')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultMonks_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdlsacz03')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "dpi30testeusdlsacz03 storage for ETL chapter",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('dpi30testeusdlsacz03_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdlsacz03_blob')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('dpi30testeusdlsacz03_blob_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/userdataETL')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dpi30testeusdjuserdata",
								"type": "DatasetReference"
							},
							"name": "ReadSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dpi30testeusdjtargetparq",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "RenameColumn"
						},
						{
							"name": "ReplaceNull"
						},
						{
							"name": "surrogateKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          registration_dttm as timestamp,",
						"          id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          gender as string,",
						"          ip_address as string,",
						"          cc as string,",
						"          country as string,",
						"          birthdate as string,",
						"          salary as double,",
						"          title as string,",
						"          comments as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ReadSource",
						"ReadSource select(mapColumn(",
						"          FIRSTNAME = first_name,",
						"          LASTNAME = last_name,",
						"          EMAIL = email,",
						"          GENDER = gender,",
						"          BIRTHDATE = birthdate,",
						"          SALARY = salary,",
						"          TITLE = title",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumn",
						"RenameColumn derive(GENDER = iif((GENDER)=='', 'NA', GENDER),",
						"          TITLE = iif((TITLE)=='', 'NA', TITLE),",
						"          SALARY = iifNull(SALARY, 0, SALARY)) ~> ReplaceNull",
						"ReplaceNull keyGenerate(output(SURROGATEKEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dpi30testeusdjuserdata')]",
				"[concat(variables('workspaceId'), '/datasets/dpi30testeusdjtargetparq')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datamonkstestss_populationdf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datamonkstestss_populationcsv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageDatamonksTest",
								"type": "LinkedServiceReference"
							},
							"name": "datamonkstestsspopulationsink"
						}
					],
					"transformations": [
						{
							"name": "replaceNull"
						},
						{
							"name": "yearFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Year as string,",
						"          Afghanistan as string,",
						"          Angola as string,",
						"          Albania as string,",
						"          {United Arab Emirates} as string,",
						"          Argentina as string,",
						"          Armenia as string,",
						"          Australia as string,",
						"          Austria as string,",
						"          Azerbaijan as string,",
						"          Burundi as string,",
						"          Belgium as string,",
						"          Benin as string,",
						"          {Burkina Faso} as string,",
						"          Bangladesh as string,",
						"          Bulgaria as string,",
						"          Bahrain as string,",
						"          {Bosnia and Herzegovina} as string,",
						"          Belarus as string,",
						"          {Bolivia (Plurinational State of)} as string,",
						"          Brazil as string,",
						"          Barbados as string,",
						"          Botswana as string,",
						"          {Central African Republic} as string,",
						"          Canada as string,",
						"          Switzerland as string,",
						"          Chile as string,",
						"          China as string,",
						"          {Côte d'Ivoire} as string,",
						"          Cameroon as string,",
						"          {D.R. of the Congo} as string,",
						"          Congo as string,",
						"          Colombia as string,",
						"          Comoros as string,",
						"          {Cabo Verde} as string,",
						"          {Costa Rica} as string,",
						"          Czechoslovakia as string,",
						"          Cuba as string,",
						"          Cyprus as string,",
						"          {Czech Republic} as string,",
						"          Germany as string,",
						"          Djibouti as string,",
						"          Dominica as string,",
						"          Denmark as string,",
						"          {Dominican Republic} as string,",
						"          Algeria as string,",
						"          Ecuador as string,",
						"          Egypt as string,",
						"          Spain as string,",
						"          Estonia as string,",
						"          Ethiopia as string,",
						"          Finland as string,",
						"          France as string,",
						"          Gabon as string,",
						"          {United Kingdom} as string,",
						"          Georgia as string,",
						"          Ghana as string,",
						"          Guinea as string,",
						"          Gambia as string,",
						"          {Guinea-Bissau} as string,",
						"          {Equatorial Guinea} as string,",
						"          Greece as string,",
						"          Guatemala as string,",
						"          {China, Hong Kong SAR} as string,",
						"          Honduras as string,",
						"          Croatia as string,",
						"          Haiti as string,",
						"          Hungary as string,",
						"          Indonesia as string,",
						"          India as string,",
						"          Ireland as string,",
						"          {Iran (Islamic Republic of)} as string,",
						"          Iraq as string,",
						"          Iceland as string,",
						"          Israel as string,",
						"          Italy as string,",
						"          Jamaica as string,",
						"          Jordan as string,",
						"          Japan as string,",
						"          Kazakhstan as string,",
						"          Kenya as string,",
						"          Kyrgyzstan as string,",
						"          Cambodia as string,",
						"          {Republic of Korea} as string,",
						"          Kuwait as string,",
						"          {Lao People's DR} as string,",
						"          Lebanon as string,",
						"          Liberia as string,",
						"          Libya as string,",
						"          {Saint Lucia} as string,",
						"          {Sri Lanka} as string,",
						"          Lesotho as string,",
						"          Lithuania as string,",
						"          Luxembourg as string,",
						"          Latvia as string,",
						"          Morocco as string,",
						"          {Republic of Moldova} as string,",
						"          Madagascar as string,",
						"          Mexico as string,",
						"          {TFYR of Macedonia} as string,",
						"          Mali as string,",
						"          Malta as string,",
						"          Myanmar as string,",
						"          Montenegro as string,",
						"          Mongolia as string,",
						"          Mozambique as string,",
						"          Mauritania as string,",
						"          Mauritius as string,",
						"          Malawi as string,",
						"          Malaysia as string,",
						"          Namibia as string,",
						"          Niger as string,",
						"          Nigeria as string,",
						"          Nicaragua as string,",
						"          Netherlands as string,",
						"          Norway as string,",
						"          Nepal as string,",
						"          {New Zealand} as string,",
						"          Oman as string,",
						"          Pakistan as string,",
						"          Panama as string,",
						"          Peru as string,",
						"          Philippines as string,",
						"          Poland as string,",
						"          {Puerto Rico} as string,",
						"          {D.P.R. of Korea} as string,",
						"          Portugal as string,",
						"          Paraguay as string,",
						"          {State of Palestine} as string,",
						"          Qatar as string,",
						"          Romania as string,",
						"          {Russian Federation} as string,",
						"          Rwanda as string,",
						"          {Saudi Arabia} as string,",
						"          {Sudan (Former)} as string,",
						"          Senegal as string,",
						"          Singapore as string,",
						"          {Sierra Leone} as string,",
						"          {El Salvador} as string,",
						"          Serbia as string,",
						"          {Sao Tome and Principe} as string,",
						"          {Former USSR} as string,",
						"          Slovakia as string,",
						"          Slovenia as string,",
						"          Sweden as string,",
						"          Swaziland as string,",
						"          Seychelles as string,",
						"          {Syrian Arab Republic} as string,",
						"          Chad as string,",
						"          Togo as string,",
						"          Thailand as string,",
						"          Tajikistan as string,",
						"          Turkmenistan as string,",
						"          {Trinidad and Tobago} as string,",
						"          Tunisia as string,",
						"          Turkey as string,",
						"          {Taiwan, Province of China} as string,",
						"          {U.R. of Tanzania: Mainland} as string,",
						"          Uganda as string,",
						"          Ukraine as string,",
						"          Uruguay as string,",
						"          {United States} as string,",
						"          Uzbekistan as string,",
						"          {Venezuela (Bolivarian Republic of)} as string,",
						"          {Viet Nam} as string,",
						"          Yemen as string,",
						"          {Former Yugoslavia} as string,",
						"          {South Africa} as string,",
						"          Zambia as string,",
						"          Zimbabwe as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"yearFilter derive(each(match(type==\"string\"), $$ = iifNull($$, \"NA\"))) ~> replaceNull",
						"source1 filter(toInteger(Year)>1700) ~> yearFilter",
						"replaceNull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'rz-container',",
						"     folderPath: 'Pricing/datamonks-test-ss',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> datamonkstestsspopulationsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/datamonkstestss_populationcsv')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ETLChapterSPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"customLibraries": [
					{
						"name": "lift-json_2.12-3.5.0.jar",
						"path": "dpi30-test-eus-syn-01/libraries/lift-json_2.12-3.5.0.jar",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "jar"
					}
				],
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SampleSpark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testspark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"customLibraries": [
					{
						"name": "lift-json_2.12-3.5.0.jar",
						"path": "dpi30-test-eus-syn-01/libraries/lift-json_2.12-3.5.0.jar",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "jar"
					},
					{
						"name": "emoji-java-5.1.1.jar",
						"path": "dpi30-test-eus-syn-01/libraries/emoji-java-5.1.1.jar",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "jar"
					},
					{
						"name": "emojideplib.jar",
						"path": "dpi30-test-eus-syn-01/libraries/emojideplib.jar",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "jar"
					},
					{
						"name": "gson-2.9.0.jar",
						"path": "dpi30-test-eus-syn-01/libraries/gson-2.9.0.jar",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "jar"
					},
					{
						"name": "jsonlibrary.jar",
						"path": "dpi30-test-eus-syn-01/libraries/jsonlibrary.jar",
						"containerName": "prep",
						"uploadedTimestamp": "0001-01-01T00:00:00+00:00",
						"type": "jar"
					}
				],
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/meddlia_query_csv_parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SRC_SYS_INTRCTN_KEY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRC_SYS_INTRCTN_KEY",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SRC_TYPE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRC_TYPE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SERV_LINE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SERV_LINE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SRVY_ELGBL_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRVY_ELGBL_DT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ACCT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCT_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SRVY_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRVY_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "BUS_UNIT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BUS_UNIT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SRVY_RESP_TS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRVY_RESP_TS",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CTRY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CTRY",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SRVY_TYPE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRVY_TYPE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CTRY_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CTRY_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SUB_BRAND",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SUB_BRAND",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MED_CUST_NUM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MED_CUST_NUM",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "URN_IDM_COMP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "URN_IDM_COMP",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CUST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CUST_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "URN_IDM_INDIV",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "URN_IDM_INDIV",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBL_BUY_GRP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBL_BUY_GRP",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_10_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_10_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBL_BUY_GRP_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBL_BUY_GRP_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_10_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_10_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBS_SECTOR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBS_SECTOR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_15_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_15_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_10_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_10_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_15_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_15_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_10_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_10_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_17_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_17_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_17_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_17_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_17_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_17_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_17_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_17_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_20_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_20_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_20_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_20_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_20_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_20_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_20_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_20_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_30_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_30_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_30_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_30_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UT_LVL_30_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UT_LVL_30_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBT_LVL_30_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBT_LVL_30_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBL_CLIENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBL_CLIENT_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GBL_CLIENT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GBL_CLIENT_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "VAL_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "VAL_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IBM_GBL_IMT_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IBM_GBL_IMT_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IBM_GBL_IMT_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IBM_GBL_IMT_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IBM_GBL_IOT_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IBM_GBL_IOT_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IBM_GBL_IOT_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IBM_GBL_IOT_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ORG_MKT_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ORG_MKT_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ORG_MKT_DSCR_FULL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ORG_MKT_DSCR_FULL",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "STRTGY_MKT_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STRTGY_MKT_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "STRTGY_MKT_DSCR_FULL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STRTGY_MKT_DSCR_FULL",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IND_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IND_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IND_EXPERTS_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IND_EXPERTS_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "INVTN_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVTN_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "JOB_ROLE_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JOB_ROLE_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "JOB_TITLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JOB_TITLE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LTC_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LTC_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LTR_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LTR_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PROD_CAT_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PROD_CAT_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "OSAT_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OSAT_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ADDTNL_CMMNT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ADDTNL_CMMNT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ADDTNL_ENGLISH_CMMNT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ADDTNL_ENGLISH_CMMNT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PRTNRSP_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PRTNRSP_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MED_LANG_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MED_LANG_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PID_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PID_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PROJ_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PROJ_NAME",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "REAS_FOR_SCORE_CMMNT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REAS_FOR_SCORE_CMMNT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "REAS_FOR_SCORE_ENGLISH_CMMNT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REAS_FOR_SCORE_ENGLISH_CMMNT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "RESPVNSS_SCORE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RESPVNSS_SCORE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "RUN_DSCR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RUN_DSCR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SD_SECTOR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SD_SECTOR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SCRTY_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SCRTY_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SRC_FILE_CREATE_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SRC_FILE_CREATE_DT",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "DATA_SRC_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DATA_SRC_CD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CREATE_TS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATE_TS",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UPDT_TS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UPDT_TS",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "meddlia_query",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "medllia_query_result_Parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-12T10:33:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/meddlia_query')]",
				"[concat(variables('workspaceId'), '/datasets/medllia_query_result_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmdp_simpletest1_WIP_DontMoveit')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "source",
									"wildcardFileName": "emp.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlPoolTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSynapseAnalytics1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "insert into dbo.emp select 'bond1','pang1';"
								}
							]
						}
					},
					{
						"name": "SQL pool stored procedure1",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dpi30testeusdsqlp01",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[p_emp_1]"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-10T10:21:02Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/SqlPoolTable1')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]",
				"[concat(variables('workspaceId'), '/sqlPools/dpi30testeusdsqlp01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_luu')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_luu",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_luu",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_luu",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T07:57:43Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_luu')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_luu')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_hw0')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_hw0",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "rz-container/Pricing/datamonks-test/userdata2.parquet"
							},
							{
								"name": "Destination",
								"value": "testcontainer//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hw0",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_hw0",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T11:09:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_hw0')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_hw0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/copyJobDevMonks')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_y0h",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "rz-container/Pricing/datamonks-test/"
							},
							{
								"name": "Destination",
								"value": "rz-container/Pricing/datamonks-target-dir/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_y0h",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_y0h",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T12:28:48Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_y0h')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_y0h')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeuspargtojson')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "parqtojson",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dpi30testeusdjuserdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dpi30testeusdjtargetjson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T08:04:36Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dpi30testeusdjuserdata')]",
				"[concat(variables('workspaceId'), '/datasets/dpi30testeusdjtargetjson')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_bsv')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_bsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "rz-container/Pricing/datamonks-test/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{\n \"email\": \"Sreepada.Jayanthi@kyndryl.com\",\n \"password\" : \"qwerty\"\n}",
								"additionalHeaders": {
									"Content-Type": "application/json"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_bsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_bsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T08:31:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_bsv')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_bsv')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeussimpledjrest')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://worldtimeapi.org/api/timezone/asia/kolkata",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "response",
							"value": {
								"value": "@{activity('Web1').output}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"response": {
						"type": "String"
					}
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T09:52:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Restapitime')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dpi30testeusdjtargetjson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T09:12:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RestResource1')]",
				"[concat(variables('workspaceId'), '/datasets/dpi30testeusdjtargetjson')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ETLUsingDataFlow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "userdataETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ReadSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Done",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T09:07:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/userdataETL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ECRBasic')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://eci-staging.us-south.containers.appdomain.cloud/auth/authenticate",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "text/plain"
							},
							"body": "8ks7b2wDRB6wvZxGbXvuBMELtqMrMZEmmJpnZ29YQKhae"
						}
					},
					{
						"name": "token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "token",
							"value": {
								"value": "@activity('GetToken').output.Response",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DocumentJson",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://eci-staging.us-south.containers.appdomain.cloud/api/v1/documents/61730a4e5037b730896bbd7a",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {
								"Content-Type": "text/plain",
								"Authorization": {
									"value": "Bearer @{variables('token')}",
									"type": "Expression"
								}
							},
							"body": "password_here"
						}
					},
					{
						"name": "getMetaData",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DocumentJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "response",
							"value": {
								"value": "@{activity('DocumentJson').output._source.metadata}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ECR Parser",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "getMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "getID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ECRparser",
								"type": "NotebookReference"
							},
							"parameters": {
								"response": {
									"value": {
										"value": "@variables('response')",
										"type": "Expression"
									},
									"type": "string"
								},
								"id": {
									"value": {
										"value": "@variables('id')",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "testspark",
								"type": "BigDataPoolReference"
							}
						}
					},
					{
						"name": "getID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DocumentJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "id",
							"value": {
								"value": "@{activity('DocumentJson').output._id}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"token": {
						"type": "String"
					},
					"response": {
						"type": "String"
					},
					"cmr": {
						"type": "String"
					},
					"id": {
						"type": "String"
					}
				},
				"folder": {
					"name": "dpi30testeusdj/ECR"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T10:14:15Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/notebooks/ECRparser')]",
				"[concat(variables('workspaceId'), '/bigDataPools/testspark')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datamonks-test-ss')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "datamonks-ss-nb",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "datamonkstest-ss-nb",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "datamonkstestss_populationdf",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "datamonkstestss_populationdf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"datamonkstestsspopulationsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-11T17:29:36Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/datamonkstest-ss-nb')]",
				"[concat(variables('workspaceId'), '/dataflows/datamonkstestss_populationdf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMETLAPI')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "APIDP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ILMT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ILMTJ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-20T14:13:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ILMT')]",
				"[concat(variables('workspaceId'), '/datasets/ILMTJ')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMETLCSV')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "RZtoDP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "FileName"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FileType"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AccountMapping",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AMETLSqlPoolTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T11:28:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AccountMapping')]",
				"[concat(variables('workspaceId'), '/datasets/AMETLSqlPoolTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CatalystCopyPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_ai8",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "catalyst-raw/rev-cost/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": "select \r\ncase when ade.category ='LMA' then 'LMA'\r\nwhen ade.account_code like ('PFA_ACC') then 'Proforma adjustment'\r\nelse 'TAW'\r\nend as type, ade.geo_nm, ade.market_name, ade.client_unit_nm, ade.account_nm, ade.account_code, ade.managing_partner_nm, ade.global_account_nm, ade.contract_number, \r\nade.legal_contract_num, ade.gbg_id, agm.glbl_buy_group_nm, offer.practices, offer.ais, year, quarter, month, sum(revenue)as revenue, sum(cost)as cost, sum(gp)as gp\r\nfrom raw.actuals_details_export ade\r\nleft outer join catalyst.offering offer on ade.offering_code=offer.id\r\nleft outer join catalyst.account_gbg_mapping agm on (ade.gbg_id=agm.glbl_buy_group_id and ade.country_number=agm.ctry_cd)\r\nwhere year=2021 and geo_nm='Germany'\r\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ai8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ai8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_ai8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": "select * from (\nselect 'certified backlog' as type, bu.geo_nm, bu.market_acts_nm as market_name, bu.client_unit_nm, bu.account_nm, account as account_code, bu.managing_partner_nm, bu.global_account_nm, contract_num,\ngbg as gbg_id, agm.glbl_buy_group_nm, offer.practices, offer.ais, year, quarter_n as quarter, month,\nsum (case when quarter_n=1 then q1_ver\nwhen quarter_n=2 then q2_ver\nwhen quarter_n=3 then q3_ver\nwhen quarter_n=4 then q4_ver\nend) as certified_backlog\nfrom raw.wsb_bklg_final qbb\nleft outer join catalyst.business_unit bu on qbb.account = bu.account_cd\nleft outer join catalyst.offering offer on qbb.offerings=offer.id\nleft outer join catalyst.account_gbg_mapping agm on (qbb.gbg=agm.glbl_buy_group_id and qbb.country_cd=agm.ctry_cd)\n\twhere geo_nm ='Germany'\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n)a where certified_backlog<>0"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ai8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CertifiedBacklog",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": "select 'signings' as type, bu.geo_nm, bu.market_acts_nm as market_name, bu.client_unit_nm, bu.account_nm, account as account_code, bu.managing_partner_nm, bu.global_account_nm, contract_num,\ngbg as gbg_id, agm.glbl_buy_group_nm, offer.practices, offer.ais, year_num as year, quarter_num as quarter, month,\nsum (value) as signings\nfrom raw.wsb_signings_final sign\nleft outer join catalyst.business_unit bu on sign.account = bu.account_cd\nleft outer join catalyst.offering offer on sign.offerings=offer.id\nleft outer join catalyst.account_gbg_mapping agm on (sign.gbg=agm.glbl_buy_group_id and sign.country_cd=agm.ctry_cd)\n\twhere geo_nm ='Germany' and value<>0\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ai8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Signings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T16:08:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ai8')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ai8')]",
				"[concat(variables('workspaceId'), '/datasets/CertifiedBacklog')]",
				"[concat(variables('workspaceId'), '/datasets/Signings')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azure_function')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HttpTableExtractor",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\"action\": \"validate_sql\", \"github_url\": \"', pipeline().parameters.github_url,'\"}'))",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(indexof(activity('Azure Function1').output.Response, '\"sql_ready_for_execution\": true'), 0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail_False",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "If condition is false",
										"errorCode": "-1"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Fail_True",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "If condition is True",
										"errorCode": "100"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"github_url": {
						"type": "String",
						"defaultValue": "https://github.kyndryl.net/ETL-CHAPTER/PROJECTS/blob/main/PZ_EAM_REPORTING_NC/OH1_EMEA/OH1_EMEA_IBM%20-%20IBM_BIGSQL_1.sql"
					}
				},
				"folder": {
					"name": "Michal"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-13T10:37:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFunction1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadAndSendData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ReadAndSendData",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ReadAndSendData",
								"type": "NotebookReference"
							},
							"parameters": {
								"input": {
									"value": "abcd",
									"type": "string"
								}
							},
							"snapshot": true
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ReadAndSendData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "output",
							"value": {
								"value": "@activity('ReadAndSendData').output.status.Output.result.exitValue",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"output": {
						"type": "String",
						"defaultValue": "failed"
					}
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T05:52:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/ReadAndSendData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseHyperwaveEXTLaunch')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SynapseDDLLaunchHyperwave",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "SynapseDDLLaunchHyperwave",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "ETLChapterSPool",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Adam"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-09T21:18:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/SynapseDDLLaunchHyperwave')]",
				"[concat(variables('workspaceId'), '/bigDataPools/ETLChapterSPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/InTheNameOfKane')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "LOCATION",
								"value": "/BIGSQL_TRAILS_TRAILS_EAADMIN_ALLOCATION_METHODOLOGY.cs"
							},
							{
								"name": "DATA_SOURCE",
								"value": "bigsqltrails"
							}
						],
						"linkedServiceName": {
							"referenceName": "AdamDvorakDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "IF EXISTS(SELECT [name]  FROM sys.tables WHERE [name] = 'EXT_BIGSQL_TRAILS_TRAILS_EAADMIN_ALLOCATION_METHODOLOGY')DROP EXTERNAL TABLE EXT_BIGSQL_TRAILS_TRAILS_EAADMIN_ALLOCATION_METHODOLOGY;\nCREATE EXTERNAL TABLE EXT_BIGSQL_TRAILS_TRAILS_EAADMIN_ALLOCATION_METHODOLOGY\n(\n\"ID\" BIGINT NOT NULL,\n\"NAME\" VARCHAR (64) NOT NULL,\n\"CODE\" VARCHAR (20) NOT NULL,\n\"UPLOAD\" DATE NOT NULL\n) \n\n WITH \n(\nLOCATION = '/BIGSQL_TRAILS_TRAILS_EAADMIN_ALLOCATION_METHODOLOGY.csv',\nDATA_SOURCE = bigsqltrails,\nFILE_FORMAT = ETL8\n);\n\nIF OBJECT_ID(N'TRAILS_TRAILS.EAADMIN_ALLOCATION_METHODOLOGY', N'U') IS NOT NULL DROP TABLE TRAILS_TRAILS.EAADMIN_ALLOCATION_METHODOLOGY;\nCREATE TABLE TRAILS_TRAILS.EAADMIN_ALLOCATION_METHODOLOGY\nWITH \n(\nDISTRIBUTION = ROUND_ROBIN\n)\nAS\nSELECT * FROM EXT_BIGSQL_TRAILS_TRAILS_EAADMIN_ALLOCATION_METHODOLOGY;\nSELECT * FROM TRAILS_TRAILS.EAADMIN_ALLOCATION_METHODOLOGY;"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-17T08:56:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AdamDvorakDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RUN_SQL_FROM_FILE')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GET_FILE_CONTENT",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "NOHY.SQL",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GET_FILE_CONTENT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "QUERY",
							"value": {
								"value": "@string(activity('GET_FILE_CONTENT').output.value[0].Prop_0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AdamDvorakDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "@variables('QUERY')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"DDL": {
						"type": "Array"
					},
					"QUERY": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T14:48:21Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/linkedServices/AdamDvorakDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dpi30testeusdlsacz03_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "test"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dpi30testeusdlsacz03_blob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/meddlia_query')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "medllia_table.csv",
						"fileSystem": "medallia-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SRC_SYS_INTRCTN_KEY",
						"type": "String"
					},
					{
						"name": "SRC_TYPE",
						"type": "String"
					},
					{
						"name": "SERV_LINE",
						"type": "String"
					},
					{
						"name": "SRVY_ELGBL_DT",
						"type": "String"
					},
					{
						"name": "ACCT_NAME",
						"type": "String"
					},
					{
						"name": "SRVY_ID",
						"type": "String"
					},
					{
						"name": "BUS_UNIT",
						"type": "String"
					},
					{
						"name": "SRVY_RESP_TS",
						"type": "String"
					},
					{
						"name": "CTRY",
						"type": "String"
					},
					{
						"name": "SRVY_TYPE",
						"type": "String"
					},
					{
						"name": "CTRY_NAME",
						"type": "String"
					},
					{
						"name": "SUB_BRAND",
						"type": "String"
					},
					{
						"name": "MED_CUST_NUM",
						"type": "String"
					},
					{
						"name": "URN_IDM_COMP",
						"type": "String"
					},
					{
						"name": "CUST_NAME",
						"type": "String"
					},
					{
						"name": "URN_IDM_INDIV",
						"type": "String"
					},
					{
						"name": "GBL_BUY_GRP",
						"type": "String"
					},
					{
						"name": "UT_LVL_10_CD",
						"type": "String"
					},
					{
						"name": "GBL_BUY_GRP_NAME",
						"type": "String"
					},
					{
						"name": "UT_LVL_10_DSCR",
						"type": "String"
					},
					{
						"name": "GBS_SECTOR",
						"type": "String"
					},
					{
						"name": "UT_LVL_15_CD",
						"type": "String"
					},
					{
						"name": "GBT_LVL_10_CD",
						"type": "String"
					},
					{
						"name": "UT_LVL_15_DSCR",
						"type": "String"
					},
					{
						"name": "GBT_LVL_10_DSCR",
						"type": "String"
					},
					{
						"name": "UT_LVL_17_CD",
						"type": "String"
					},
					{
						"name": "GBT_LVL_17_CD",
						"type": "String"
					},
					{
						"name": "UT_LVL_17_DSCR",
						"type": "String"
					},
					{
						"name": "GBT_LVL_17_DSCR",
						"type": "String"
					},
					{
						"name": "UT_LVL_20_CD",
						"type": "String"
					},
					{
						"name": "GBT_LVL_20_CD",
						"type": "String"
					},
					{
						"name": "UT_LVL_20_DSCR",
						"type": "String"
					},
					{
						"name": "GBT_LVL_20_DSCR",
						"type": "String"
					},
					{
						"name": "UT_LVL_30_CD",
						"type": "String"
					},
					{
						"name": "GBT_LVL_30_CD",
						"type": "String"
					},
					{
						"name": "UT_LVL_30_DSCR",
						"type": "String"
					},
					{
						"name": "GBT_LVL_30_DSCR",
						"type": "String"
					},
					{
						"name": "GBL_CLIENT_ID",
						"type": "String"
					},
					{
						"name": "GBL_CLIENT_NAME",
						"type": "String"
					},
					{
						"name": "VAL_SCORE",
						"type": "String"
					},
					{
						"name": "IBM_GBL_IMT_CD",
						"type": "String"
					},
					{
						"name": "IBM_GBL_IMT_DSCR",
						"type": "String"
					},
					{
						"name": "IBM_GBL_IOT_CD",
						"type": "String"
					},
					{
						"name": "IBM_GBL_IOT_DSCR",
						"type": "String"
					},
					{
						"name": "ORG_MKT_CD",
						"type": "String"
					},
					{
						"name": "ORG_MKT_DSCR_FULL",
						"type": "String"
					},
					{
						"name": "STRTGY_MKT_CD",
						"type": "String"
					},
					{
						"name": "STRTGY_MKT_DSCR_FULL",
						"type": "String"
					},
					{
						"name": "IND_NAME",
						"type": "String"
					},
					{
						"name": "IND_EXPERTS_SCORE",
						"type": "String"
					},
					{
						"name": "INVTN_SCORE",
						"type": "String"
					},
					{
						"name": "JOB_ROLE_DSCR",
						"type": "String"
					},
					{
						"name": "JOB_TITLE",
						"type": "String"
					},
					{
						"name": "LTC_SCORE",
						"type": "String"
					},
					{
						"name": "LTR_SCORE",
						"type": "String"
					},
					{
						"name": "PROD_CAT_CD",
						"type": "String"
					},
					{
						"name": "OSAT_SCORE",
						"type": "String"
					},
					{
						"name": "ADDTNL_CMMNT",
						"type": "String"
					},
					{
						"name": "ADDTNL_ENGLISH_CMMNT",
						"type": "String"
					},
					{
						"name": "PRTNRSP_SCORE",
						"type": "String"
					},
					{
						"name": "MED_LANG_CD",
						"type": "String"
					},
					{
						"name": "PID",
						"type": "String"
					},
					{
						"name": "PID_DSCR",
						"type": "String"
					},
					{
						"name": "PROJ_NAME",
						"type": "String"
					},
					{
						"name": "REAS_FOR_SCORE_CMMNT",
						"type": "String"
					},
					{
						"name": "REAS_FOR_SCORE_ENGLISH_CMMNT",
						"type": "String"
					},
					{
						"name": "RESPVNSS_SCORE",
						"type": "String"
					},
					{
						"name": "RUN_DSCR",
						"type": "String"
					},
					{
						"name": "SD_SECTOR",
						"type": "String"
					},
					{
						"name": "SCRTY_ID",
						"type": "String"
					},
					{
						"name": "SRC_FILE_CREATE_DT",
						"type": "String"
					},
					{
						"name": "DATA_SRC_CD",
						"type": "String"
					},
					{
						"name": "CREATE_TS",
						"type": "String"
					},
					{
						"name": "UPDT_TS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/medllia_query_result_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "medllia_data.parquet",
						"fileSystem": "medallia-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				},
				"sqlPool": {
					"referenceName": "dpi30testeusdsqlp01",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dpi30testeusdsqlp01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dpi30testeusdlsacz03_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "NOHY.sql"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dpi30testeusdlsacz03_blob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1_Test",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "dpi30testeusdlsafsrz01"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1_Test')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_luu')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/datamonks-test",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "registration_dttm",
						"type": "INT96"
					},
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "first_name",
						"type": "UTF8"
					},
					{
						"name": "last_name",
						"type": "UTF8"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "gender",
						"type": "UTF8"
					},
					{
						"name": "ip_address",
						"type": "UTF8"
					},
					{
						"name": "cc",
						"type": "UTF8"
					},
					{
						"name": "country",
						"type": "UTF8"
					},
					{
						"name": "birthdate",
						"type": "UTF8"
					},
					{
						"name": "salary",
						"type": "DOUBLE"
					},
					{
						"name": "title",
						"type": "UTF8"
					},
					{
						"name": "comments",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_luu')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/datamonks-target-dir",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_hw0')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azuretestblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Azuretestblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_hw0')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "userdata2.parquet",
						"folderPath": "Pricing/datamonks-test",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "registration_dttm",
						"type": "INT96"
					},
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "first_name",
						"type": "UTF8"
					},
					{
						"name": "last_name",
						"type": "UTF8"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "gender",
						"type": "UTF8"
					},
					{
						"name": "ip_address",
						"type": "UTF8"
					},
					{
						"name": "cc",
						"type": "UTF8"
					},
					{
						"name": "country",
						"type": "UTF8"
					},
					{
						"name": "birthdate",
						"type": "UTF8"
					},
					{
						"name": "salary",
						"type": "DOUBLE"
					},
					{
						"name": "title",
						"type": "UTF8"
					},
					{
						"name": "comments",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_y0h')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/datamonks-test",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "registration_dttm",
						"type": "INT96"
					},
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "first_name",
						"type": "UTF8"
					},
					{
						"name": "last_name",
						"type": "UTF8"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "gender",
						"type": "UTF8"
					},
					{
						"name": "ip_address",
						"type": "UTF8"
					},
					{
						"name": "cc",
						"type": "UTF8"
					},
					{
						"name": "country",
						"type": "UTF8"
					},
					{
						"name": "birthdate",
						"type": "UTF8"
					},
					{
						"name": "salary",
						"type": "DOUBLE"
					},
					{
						"name": "title",
						"type": "UTF8"
					},
					{
						"name": "comments",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_y0h')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/datamonks-target-dir",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdjuserdata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "userdata2.parquet",
						"folderPath": "Pricing/dj_test",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdjsynapse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dpi30-test-eus-syn-01-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "user"
					}
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "dpi30testeusdj"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dpi30-test-eus-syn-01-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdjtargetjson')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dpi30testeusdj"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/dj_test/Result",
						"fileSystem": "rz-container"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_bsv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TkgenMonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"requestMethod": "GET"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TkgenMonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_bsv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/datamonks-test",
						"fileSystem": "rz-container"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResource1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdjtargetparq')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pricing/dj_test/Result",
						"fileSystem": "rz-container"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datamonkstestss_populationcsv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDatamonksTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Population.csv",
						"folderPath": "Pricing/datamonks-test-ss",
						"fileSystem": "rz-container"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Afghanistan",
						"type": "String"
					},
					{
						"name": "Angola",
						"type": "String"
					},
					{
						"name": "Albania",
						"type": "String"
					},
					{
						"name": "United Arab Emirates",
						"type": "String"
					},
					{
						"name": "Argentina",
						"type": "String"
					},
					{
						"name": "Armenia",
						"type": "String"
					},
					{
						"name": "Australia",
						"type": "String"
					},
					{
						"name": "Austria",
						"type": "String"
					},
					{
						"name": "Azerbaijan",
						"type": "String"
					},
					{
						"name": "Burundi",
						"type": "String"
					},
					{
						"name": "Belgium",
						"type": "String"
					},
					{
						"name": "Benin",
						"type": "String"
					},
					{
						"name": "Burkina Faso",
						"type": "String"
					},
					{
						"name": "Bangladesh",
						"type": "String"
					},
					{
						"name": "Bulgaria",
						"type": "String"
					},
					{
						"name": "Bahrain",
						"type": "String"
					},
					{
						"name": "Bosnia and Herzegovina",
						"type": "String"
					},
					{
						"name": "Belarus",
						"type": "String"
					},
					{
						"name": "Bolivia (Plurinational State of)",
						"type": "String"
					},
					{
						"name": "Brazil",
						"type": "String"
					},
					{
						"name": "Barbados",
						"type": "String"
					},
					{
						"name": "Botswana",
						"type": "String"
					},
					{
						"name": "Central African Republic",
						"type": "String"
					},
					{
						"name": "Canada",
						"type": "String"
					},
					{
						"name": "Switzerland",
						"type": "String"
					},
					{
						"name": "Chile",
						"type": "String"
					},
					{
						"name": "China",
						"type": "String"
					},
					{
						"name": "Côte d'Ivoire",
						"type": "String"
					},
					{
						"name": "Cameroon",
						"type": "String"
					},
					{
						"name": "D.R. of the Congo",
						"type": "String"
					},
					{
						"name": "Congo",
						"type": "String"
					},
					{
						"name": "Colombia",
						"type": "String"
					},
					{
						"name": "Comoros",
						"type": "String"
					},
					{
						"name": "Cabo Verde",
						"type": "String"
					},
					{
						"name": "Costa Rica",
						"type": "String"
					},
					{
						"name": "Czechoslovakia",
						"type": "String"
					},
					{
						"name": "Cuba",
						"type": "String"
					},
					{
						"name": "Cyprus",
						"type": "String"
					},
					{
						"name": "Czech Republic",
						"type": "String"
					},
					{
						"name": "Germany",
						"type": "String"
					},
					{
						"name": "Djibouti",
						"type": "String"
					},
					{
						"name": "Dominica",
						"type": "String"
					},
					{
						"name": "Denmark",
						"type": "String"
					},
					{
						"name": "Dominican Republic",
						"type": "String"
					},
					{
						"name": "Algeria",
						"type": "String"
					},
					{
						"name": "Ecuador",
						"type": "String"
					},
					{
						"name": "Egypt",
						"type": "String"
					},
					{
						"name": "Spain",
						"type": "String"
					},
					{
						"name": "Estonia",
						"type": "String"
					},
					{
						"name": "Ethiopia",
						"type": "String"
					},
					{
						"name": "Finland",
						"type": "String"
					},
					{
						"name": "France",
						"type": "String"
					},
					{
						"name": "Gabon",
						"type": "String"
					},
					{
						"name": "United Kingdom",
						"type": "String"
					},
					{
						"name": "Georgia",
						"type": "String"
					},
					{
						"name": "Ghana",
						"type": "String"
					},
					{
						"name": "Guinea",
						"type": "String"
					},
					{
						"name": "Gambia",
						"type": "String"
					},
					{
						"name": "Guinea-Bissau",
						"type": "String"
					},
					{
						"name": "Equatorial Guinea",
						"type": "String"
					},
					{
						"name": "Greece",
						"type": "String"
					},
					{
						"name": "Guatemala",
						"type": "String"
					},
					{
						"name": "China, Hong Kong SAR",
						"type": "String"
					},
					{
						"name": "Honduras",
						"type": "String"
					},
					{
						"name": "Croatia",
						"type": "String"
					},
					{
						"name": "Haiti",
						"type": "String"
					},
					{
						"name": "Hungary",
						"type": "String"
					},
					{
						"name": "Indonesia",
						"type": "String"
					},
					{
						"name": "India",
						"type": "String"
					},
					{
						"name": "Ireland",
						"type": "String"
					},
					{
						"name": "Iran (Islamic Republic of)",
						"type": "String"
					},
					{
						"name": "Iraq",
						"type": "String"
					},
					{
						"name": "Iceland",
						"type": "String"
					},
					{
						"name": "Israel",
						"type": "String"
					},
					{
						"name": "Italy",
						"type": "String"
					},
					{
						"name": "Jamaica",
						"type": "String"
					},
					{
						"name": "Jordan",
						"type": "String"
					},
					{
						"name": "Japan",
						"type": "String"
					},
					{
						"name": "Kazakhstan",
						"type": "String"
					},
					{
						"name": "Kenya",
						"type": "String"
					},
					{
						"name": "Kyrgyzstan",
						"type": "String"
					},
					{
						"name": "Cambodia",
						"type": "String"
					},
					{
						"name": "Republic of Korea",
						"type": "String"
					},
					{
						"name": "Kuwait",
						"type": "String"
					},
					{
						"name": "Lao People's DR",
						"type": "String"
					},
					{
						"name": "Lebanon",
						"type": "String"
					},
					{
						"name": "Liberia",
						"type": "String"
					},
					{
						"name": "Libya",
						"type": "String"
					},
					{
						"name": "Saint Lucia",
						"type": "String"
					},
					{
						"name": "Sri Lanka",
						"type": "String"
					},
					{
						"name": "Lesotho",
						"type": "String"
					},
					{
						"name": "Lithuania",
						"type": "String"
					},
					{
						"name": "Luxembourg",
						"type": "String"
					},
					{
						"name": "Latvia",
						"type": "String"
					},
					{
						"name": "Morocco",
						"type": "String"
					},
					{
						"name": "Republic of Moldova",
						"type": "String"
					},
					{
						"name": "Madagascar",
						"type": "String"
					},
					{
						"name": "Mexico",
						"type": "String"
					},
					{
						"name": "TFYR of Macedonia",
						"type": "String"
					},
					{
						"name": "Mali",
						"type": "String"
					},
					{
						"name": "Malta",
						"type": "String"
					},
					{
						"name": "Myanmar",
						"type": "String"
					},
					{
						"name": "Montenegro",
						"type": "String"
					},
					{
						"name": "Mongolia",
						"type": "String"
					},
					{
						"name": "Mozambique",
						"type": "String"
					},
					{
						"name": "Mauritania",
						"type": "String"
					},
					{
						"name": "Mauritius",
						"type": "String"
					},
					{
						"name": "Malawi",
						"type": "String"
					},
					{
						"name": "Malaysia",
						"type": "String"
					},
					{
						"name": "Namibia",
						"type": "String"
					},
					{
						"name": "Niger",
						"type": "String"
					},
					{
						"name": "Nigeria",
						"type": "String"
					},
					{
						"name": "Nicaragua",
						"type": "String"
					},
					{
						"name": "Netherlands",
						"type": "String"
					},
					{
						"name": "Norway",
						"type": "String"
					},
					{
						"name": "Nepal",
						"type": "String"
					},
					{
						"name": "New Zealand",
						"type": "String"
					},
					{
						"name": "Oman",
						"type": "String"
					},
					{
						"name": "Pakistan",
						"type": "String"
					},
					{
						"name": "Panama",
						"type": "String"
					},
					{
						"name": "Peru",
						"type": "String"
					},
					{
						"name": "Philippines",
						"type": "String"
					},
					{
						"name": "Poland",
						"type": "String"
					},
					{
						"name": "Puerto Rico",
						"type": "String"
					},
					{
						"name": "D.P.R. of Korea",
						"type": "String"
					},
					{
						"name": "Portugal",
						"type": "String"
					},
					{
						"name": "Paraguay",
						"type": "String"
					},
					{
						"name": "State of Palestine",
						"type": "String"
					},
					{
						"name": "Qatar",
						"type": "String"
					},
					{
						"name": "Romania",
						"type": "String"
					},
					{
						"name": "Russian Federation",
						"type": "String"
					},
					{
						"name": "Rwanda",
						"type": "String"
					},
					{
						"name": "Saudi Arabia",
						"type": "String"
					},
					{
						"name": "Sudan (Former)",
						"type": "String"
					},
					{
						"name": "Senegal",
						"type": "String"
					},
					{
						"name": "Singapore",
						"type": "String"
					},
					{
						"name": "Sierra Leone",
						"type": "String"
					},
					{
						"name": "El Salvador",
						"type": "String"
					},
					{
						"name": "Serbia",
						"type": "String"
					},
					{
						"name": "Sao Tome and Principe",
						"type": "String"
					},
					{
						"name": "Former USSR",
						"type": "String"
					},
					{
						"name": "Slovakia",
						"type": "String"
					},
					{
						"name": "Slovenia",
						"type": "String"
					},
					{
						"name": "Sweden",
						"type": "String"
					},
					{
						"name": "Swaziland",
						"type": "String"
					},
					{
						"name": "Seychelles",
						"type": "String"
					},
					{
						"name": "Syrian Arab Republic",
						"type": "String"
					},
					{
						"name": "Chad",
						"type": "String"
					},
					{
						"name": "Togo",
						"type": "String"
					},
					{
						"name": "Thailand",
						"type": "String"
					},
					{
						"name": "Tajikistan",
						"type": "String"
					},
					{
						"name": "Turkmenistan",
						"type": "String"
					},
					{
						"name": "Trinidad and Tobago",
						"type": "String"
					},
					{
						"name": "Tunisia",
						"type": "String"
					},
					{
						"name": "Turkey",
						"type": "String"
					},
					{
						"name": "Taiwan, Province of China",
						"type": "String"
					},
					{
						"name": "U.R. of Tanzania: Mainland",
						"type": "String"
					},
					{
						"name": "Uganda",
						"type": "String"
					},
					{
						"name": "Ukraine",
						"type": "String"
					},
					{
						"name": "Uruguay",
						"type": "String"
					},
					{
						"name": "United States",
						"type": "String"
					},
					{
						"name": "Uzbekistan",
						"type": "String"
					},
					{
						"name": "Venezuela (Bolivarian Republic of)",
						"type": "String"
					},
					{
						"name": "Viet Nam",
						"type": "String"
					},
					{
						"name": "Yemen",
						"type": "String"
					},
					{
						"name": "Former Yugoslavia",
						"type": "String"
					},
					{
						"name": "South Africa",
						"type": "String"
					},
					{
						"name": "Zambia",
						"type": "String"
					},
					{
						"name": "Zimbabwe",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageDatamonksTest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMETL_ML')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Db22",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Db22')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMETLTBL1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {},
				"sqlPool": {
					"referenceName": "dpi30testeusdsqlp01",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dpi30testeusdsqlp01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ILMTJ')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dpi30-test-eus-syn-01-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Asset-Management",
						"fileSystem": "rz-container"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dpi30-test-eus-syn-01-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ILMT')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AMETLAPI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "https://158.87.52.49:9081/api/sam/about?token=245b2cb500d3fd8d9673f27b5787c830786f3bf5"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AMETLAPI')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AccountMapping')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "account_mapping.csv",
						"folderPath": "Asset-Management",
						"fileSystem": "rz-container"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMETLSqlPoolTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "AMETL",
					"table": "ACCOUNT_MAPPING"
				},
				"sqlPool": {
					"referenceName": "AdamDvorak",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/AdamDvorak')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ai8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Connection to catalyst",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Connection to catalyst')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ai8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "rev-cost",
						"fileSystem": "catalyst-raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CertifiedBacklog')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "certified-backlog",
						"fileSystem": "catalyst-raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Signings')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawZone_DataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "signings",
						"fileSystem": "catalyst-raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RawZone_DataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceMedallia_Zoran')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dpi30-test-eus-syn-01-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "medllia_data.parquet",
						"fileSystem": "medallia-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SRC_SYS_INTRCTN_KEY",
						"type": "UTF8"
					},
					{
						"name": "SRC_TYPE",
						"type": "UTF8"
					},
					{
						"name": "SERV_LINE",
						"type": "UTF8"
					},
					{
						"name": "SRVY_ELGBL_DT",
						"type": "UTF8"
					},
					{
						"name": "ACCT_NAME",
						"type": "UTF8"
					},
					{
						"name": "SRVY_ID",
						"type": "UTF8"
					},
					{
						"name": "BUS_UNIT",
						"type": "UTF8"
					},
					{
						"name": "SRVY_RESP_TS",
						"type": "UTF8"
					},
					{
						"name": "CTRY",
						"type": "UTF8"
					},
					{
						"name": "SRVY_TYPE",
						"type": "UTF8"
					},
					{
						"name": "CTRY_NAME",
						"type": "UTF8"
					},
					{
						"name": "SUB_BRAND",
						"type": "UTF8"
					},
					{
						"name": "MED_CUST_NUM",
						"type": "UTF8"
					},
					{
						"name": "URN_IDM_COMP",
						"type": "UTF8"
					},
					{
						"name": "CUST_NAME",
						"type": "UTF8"
					},
					{
						"name": "URN_IDM_INDIV",
						"type": "UTF8"
					},
					{
						"name": "GBL_BUY_GRP",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_10_CD",
						"type": "UTF8"
					},
					{
						"name": "GBL_BUY_GRP_NAME",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_10_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBS_SECTOR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_15_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_10_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_15_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_10_DSCR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_17_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_17_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_17_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_17_DSCR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_20_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_20_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_20_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_20_DSCR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_30_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_30_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_30_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_30_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBL_CLIENT_ID",
						"type": "UTF8"
					},
					{
						"name": "GBL_CLIENT_NAME",
						"type": "UTF8"
					},
					{
						"name": "VAL_SCORE",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IMT_CD",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IMT_DSCR",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IOT_CD",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IOT_DSCR",
						"type": "UTF8"
					},
					{
						"name": "ORG_MKT_CD",
						"type": "UTF8"
					},
					{
						"name": "ORG_MKT_DSCR_FULL",
						"type": "UTF8"
					},
					{
						"name": "STRTGY_MKT_CD",
						"type": "UTF8"
					},
					{
						"name": "STRTGY_MKT_DSCR_FULL",
						"type": "UTF8"
					},
					{
						"name": "IND_NAME",
						"type": "UTF8"
					},
					{
						"name": "IND_EXPERTS_SCORE",
						"type": "UTF8"
					},
					{
						"name": "INVTN_SCORE",
						"type": "UTF8"
					},
					{
						"name": "JOB_ROLE_DSCR",
						"type": "UTF8"
					},
					{
						"name": "JOB_TITLE",
						"type": "UTF8"
					},
					{
						"name": "LTC_SCORE",
						"type": "UTF8"
					},
					{
						"name": "LTR_SCORE",
						"type": "UTF8"
					},
					{
						"name": "PROD_CAT_CD",
						"type": "UTF8"
					},
					{
						"name": "OSAT_SCORE",
						"type": "UTF8"
					},
					{
						"name": "ADDTNL_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "ADDTNL_ENGLISH_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "PRTNRSP_SCORE",
						"type": "UTF8"
					},
					{
						"name": "MED_LANG_CD",
						"type": "UTF8"
					},
					{
						"name": "PID",
						"type": "UTF8"
					},
					{
						"name": "PID_DSCR",
						"type": "UTF8"
					},
					{
						"name": "PROJ_NAME",
						"type": "UTF8"
					},
					{
						"name": "REAS_FOR_SCORE_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "REAS_FOR_SCORE_ENGLISH_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "RESPVNSS_SCORE",
						"type": "UTF8"
					},
					{
						"name": "RUN_DSCR",
						"type": "UTF8"
					},
					{
						"name": "SD_SECTOR",
						"type": "UTF8"
					},
					{
						"name": "SCRTY_ID",
						"type": "UTF8"
					},
					{
						"name": "SRC_FILE_CREATE_DT",
						"type": "UTF8"
					},
					{
						"name": "DATA_SRC_CD",
						"type": "UTF8"
					},
					{
						"name": "CREATE_TS",
						"type": "UTF8"
					},
					{
						"name": "UPDT_TS",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dpi30-test-eus-syn-01-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SinkMedallia_Zoran')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dpi30-test-eus-syn-01-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "medallia-data-cz"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SRC_SYS_INTRCTN_KEY",
						"type": "UTF8"
					},
					{
						"name": "SRC_TYPE",
						"type": "UTF8"
					},
					{
						"name": "SERV_LINE",
						"type": "UTF8"
					},
					{
						"name": "SRVY_ELGBL_DT",
						"type": "UTF8"
					},
					{
						"name": "ACCT_NAME",
						"type": "UTF8"
					},
					{
						"name": "SRVY_ID",
						"type": "UTF8"
					},
					{
						"name": "BUS_UNIT",
						"type": "UTF8"
					},
					{
						"name": "SRVY_RESP_TS",
						"type": "UTF8"
					},
					{
						"name": "CTRY",
						"type": "UTF8"
					},
					{
						"name": "SRVY_TYPE",
						"type": "UTF8"
					},
					{
						"name": "CTRY_NAME",
						"type": "UTF8"
					},
					{
						"name": "SUB_BRAND",
						"type": "UTF8"
					},
					{
						"name": "MED_CUST_NUM",
						"type": "UTF8"
					},
					{
						"name": "URN_IDM_COMP",
						"type": "UTF8"
					},
					{
						"name": "CUST_NAME",
						"type": "UTF8"
					},
					{
						"name": "URN_IDM_INDIV",
						"type": "UTF8"
					},
					{
						"name": "GBL_BUY_GRP",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_10_CD",
						"type": "UTF8"
					},
					{
						"name": "GBL_BUY_GRP_NAME",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_10_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBS_SECTOR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_15_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_10_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_15_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_10_DSCR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_17_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_17_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_17_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_17_DSCR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_20_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_20_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_20_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_20_DSCR",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_30_CD",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_30_CD",
						"type": "UTF8"
					},
					{
						"name": "UT_LVL_30_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBT_LVL_30_DSCR",
						"type": "UTF8"
					},
					{
						"name": "GBL_CLIENT_ID",
						"type": "UTF8"
					},
					{
						"name": "GBL_CLIENT_NAME",
						"type": "UTF8"
					},
					{
						"name": "VAL_SCORE",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IMT_CD",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IMT_DSCR",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IOT_CD",
						"type": "UTF8"
					},
					{
						"name": "IBM_GBL_IOT_DSCR",
						"type": "UTF8"
					},
					{
						"name": "ORG_MKT_CD",
						"type": "UTF8"
					},
					{
						"name": "ORG_MKT_DSCR_FULL",
						"type": "UTF8"
					},
					{
						"name": "STRTGY_MKT_CD",
						"type": "UTF8"
					},
					{
						"name": "STRTGY_MKT_DSCR_FULL",
						"type": "UTF8"
					},
					{
						"name": "IND_NAME",
						"type": "UTF8"
					},
					{
						"name": "IND_EXPERTS_SCORE",
						"type": "UTF8"
					},
					{
						"name": "INVTN_SCORE",
						"type": "UTF8"
					},
					{
						"name": "JOB_ROLE_DSCR",
						"type": "UTF8"
					},
					{
						"name": "JOB_TITLE",
						"type": "UTF8"
					},
					{
						"name": "LTC_SCORE",
						"type": "UTF8"
					},
					{
						"name": "LTR_SCORE",
						"type": "UTF8"
					},
					{
						"name": "PROD_CAT_CD",
						"type": "UTF8"
					},
					{
						"name": "OSAT_SCORE",
						"type": "UTF8"
					},
					{
						"name": "ADDTNL_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "ADDTNL_ENGLISH_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "PRTNRSP_SCORE",
						"type": "UTF8"
					},
					{
						"name": "MED_LANG_CD",
						"type": "UTF8"
					},
					{
						"name": "PID",
						"type": "UTF8"
					},
					{
						"name": "PID_DSCR",
						"type": "UTF8"
					},
					{
						"name": "PROJ_NAME",
						"type": "UTF8"
					},
					{
						"name": "REAS_FOR_SCORE_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "REAS_FOR_SCORE_ENGLISH_CMMNT",
						"type": "UTF8"
					},
					{
						"name": "RESPVNSS_SCORE",
						"type": "UTF8"
					},
					{
						"name": "RUN_DSCR",
						"type": "UTF8"
					},
					{
						"name": "SD_SECTOR",
						"type": "UTF8"
					},
					{
						"name": "SCRTY_ID",
						"type": "UTF8"
					},
					{
						"name": "SRC_FILE_CREATE_DT",
						"type": "UTF8"
					},
					{
						"name": "DATA_SRC_CD",
						"type": "UTF8"
					},
					{
						"name": "CREATE_TS",
						"type": "UTF8"
					},
					{
						"name": "UPDT_TS",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dpi30-test-eus-syn-01-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CuratedZone_DataLakeStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CuratedZone_DataLakeStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdamDvorak')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30testeusdsqlp01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime3')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MD360IntegrationRuntimeTest')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime-datamonks')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateSampleDataSet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "763d0343-9211-43b3-b110-759e9009fd4a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val a = ('a' to 'z').toList.map(i => i.toString)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"val b = List.range(1,27)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"val df = a.zip(b).map(i=> (i._1,i._2)).toDF(\"col1\",\"col2\")\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadBlob')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "afc7671f-724e-4c77-abae-262e5372b45a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val acc_name = \"dpi30testeusdlsarz01\"\n",
							"val container_name = \"rz-container\" //\n",
							"val path = \"Pricing/dj_test/\"\n",
							"val hol_blob_sas_token = \"sp=r&st=2022-05-13T11:39:15Z&se=2022-05-13T19:39:15Z&spr=https&sv=2020-08-04&sr=c&sig=6h5yyXORhdwjCXKoCSkewMPbgUaAbIjJDrnDwNK%2FYFk%3D\"\n",
							"\n",
							"val fullpath = f\"wasbs://$container_name@$acc_name.blob.core.windows.net/$path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$container_name.$acc_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"// load the sample data as a Spark DataFrame\n",
							"val df = spark.read.parquet(fullpath+\"userdata2.parquet\") \n",
							"df.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sas token  = Azure Home > Storage Acc > Container > on the relavent container clikck on \"...\" > generate SAS Token"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.partionBy(\"gender\").parquet(fullpath,mode=\"overwrite\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadBlobDataSetTemplate')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "809a3bf5-1181-44d2-a708-aba0c9d0a051"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Access data on Azure Storage Blob (WASB) with Synapse Spark\n",
							"\n",
							"You can access data on Azure Storage Blob (WASB) with Synapse Spark via following URL:\n",
							"\n",
							"    wasb[s]://<container_name>@<storage_account_name>.blob.core.windows.net/<path>\n",
							"\n",
							"This notebook provides examples of how to read data from WASB into a Spark context and how to write the output of Spark jobs directly into a WASB location."
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Load a sample data\n",
							"\n",
							"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets as a sample."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// set blob storage account connection for open dataset\n",
							"\n",
							"val hol_blob_account_name = \"dpi30testeusdlsarz01\"\n",
							"val hol_blob_container_name = \"rz-container\" //\n",
							"val hol_blob_relative_path = \"Pricing/dj_test/\"\n",
							"val hol_blob_sas_token = \"\"\n",
							"\n",
							"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$hol_blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$hol_blob_account_name.blob.core.windows.net\",hol_blob_sas_token)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// load the sample data as a Spark DataFrame\n",
							"val hol_df = spark.read.parquet(hol_wasbs_path) \n",
							"hol_df.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Write data to Azure Storage Blob\n",
							"\n",
							"Synapse leverage **Shared access signature (SAS)** to access Azure Blob Storage. To avoid exposing SAS keys in the code, we recommend creating a new linked service in Synapse workspace to the Azure Blob Storage account you want to access.\n",
							"\n",
							"Follow these steps to add a new linked service for an Azure Blob Storage account:\n",
							"\n",
							"1. Open the [Azure Synapse Studio](https://web.azuresynapse.net/).\n",
							"2. Select **Manage** from the left panel and select **Linked services** under the **External connections**.\n",
							"3. Search **Azure Blob Storage** in the **New linked Service** panel on the right.\n",
							"4. Select **Continue**.\n",
							"5. Select the Azure Blob Storage Account to access and configure the linked service name. Suggest using **Account key** for the **Authentication method**.\n",
							"6. Select **Test connection** to validate the settings are correct.\n",
							"7. Select **Create** first and click **Publish all** to save your changes.\n",
							"\n",
							"You can access data on Azure Blob Storage with Synapse Spark via following URL:\n",
							"\n",
							"```wasb[s]://<container_name>@<storage_account_name>.blob.core.windows.net/```\n",
							"\n",
							"Please make sure to allow contatiner level read and write permission. Fill in the access info for your Azure storage blob in the cell below. "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// set your blob storage account connection\n",
							"\n",
							"val blob_account_name = \"\" // replace with your blob name\n",
							"val blob_container_name = \"\" //replace with your container name\n",
							"val blob_relative_path = \"\" //replace with your relative folder path\n",
							"val linked_service_name = \"\" //replace with your linked service name\n",
							"\n",
							"val blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\n",
							"\n",
							"val wasbs_path = f\"wasbs://$blob_container_name@$blob_account_name.blob.core.windows.net/$blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$blob_container_name.$blob_account_name.blob.core.windows.net\",blob_sas_token)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Save a dataframe as Parquet, JSON or CSV\n",
							"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
							"\n",
							"Dataframes can be saved in any format, regardless of the input format.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// set the path for the output file\n",
							"\n",
							"val parquet_path = wasbs_path + \"holiday.parquet\"\n",
							"val json_path = wasbs_path + \"holiday.json\"\n",
							"val csv_path = wasbs_path + \"holiday.csv\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import org.apache.spark.sql.SaveMode\n",
							"\n",
							"hol_df.write.mode(SaveMode.Overwrite).parquet(parquet_path)\n",
							"hol_df.write.mode(SaveMode.Overwrite).json(json_path)\n",
							"hol_df.write.mode(SaveMode.Overwrite).option(\"header\", \"true\").csv(csv_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Save a dataframe as text files\n",
							"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Define the text file path and covert spark dataframe into RDD\n",
							"val text_path = wasbs_path + \"holiday.txt\"\n",
							"val hol_RDD = hol_df.rdd"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"If you have an RDD, you can convert it to a text file like the following:\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Save RDD as text file\n",
							"hol_RDD.saveAsTextFile(text_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Read data from Azure Storage Blob\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Create a dataframe from parquet files\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val df_parquet = spark.read.parquet(parquet_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Create a dataframe from JSON files\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val df_json = spark.read.json(json_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Create a dataframe from CSV files\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val df_csv = spark.read.option(\"header\", \"true\").csv(csv_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Create an RDD from text file\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val text = sc.textFile(text_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"text.take(5).foreach(println)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datamonkstest-ss-nb')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "datamonkstestss"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ETLChapterSPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "893e6025-f548-4fc6-80b4-1c1c6f144d01"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/ETLChapterSPool",
						"name": "ETLChapterSPool",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ETLChapterSPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"storageAccountName = \"dpi30testeusdlsarz01\"\n",
							"containerName = \"rz-container\"\n",
							"path = \"Pricing/datamonks-test-ss\"\n",
							"sasToken = \"sp=r&st=2022-04-18T06:53:47Z&se=2022-04-18T14:53:47Z&spr=https&sv=2020-08-04&sr=b&sig=6bV0K169gREKZW9VxDWYA9KlKSfcIm7gbR7CmzmrgVQ%3D\"\n",
							"\n",
							"config = {\n",
							"    \"fs.azure.sas.\" + containerName+ \".\" + storageAccountName + \".blob.core.windows.net\" : sasToken\n",
							"}\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_dbutils(spark):\n",
							"        try:\n",
							"            from pyspark.dbutils import DBUtils\n",
							"            dbutils = DBUtils(spark)\n",
							"        except ImportError:\n",
							"            import IPython\n",
							"            dbutils = IPython.get_ipython().user_ns[\"dbutils\"]\n",
							"        return dbutils\n",
							"\n",
							"dbutils = get_dbutils(spark)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dbutils.fs.mount(\n",
							"  source = f\"wasbs://{containerName}@{storageAccountName}.blob.core.windows.net/{path}\",\n",
							"  mountPoint = \"/mnt/myfile\",\n",
							"  extraConfigs = config)\n",
							"\n",
							"# val fullpath = f\"wasbs://{containerName}@{storageAccountName}.blob.core.windows.net/{}\"\n",
							"# spark.conf.set(f\"fs.azure.sas.$container_name.$acc_name.blob.core.windows.net\",sasToken)\n",
							"# // load the sample data as a Spark DataFrame\n",
							"# val df = spark.read.parquet(fullpath+\"userdata2.parquet\") \n",
							"# df.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils  \n",
							"\n",
							"\n",
							"\n",
							"# mssparkutils.fs.mount( \n",
							"#     f\"abfss://{containerName}@{storageAccountName}.dfs.core.windows.net/{path}\",\n",
							"#     \"/test\", \n",
							"#     {\"linkedService\":\"AzureDataLakeStorageDatamonksTest\"} \n",
							"# ) \n",
							"\n",
							"print(\"starting unmount\")\n",
							"\n",
							"mssparkutils.fs.unmount(\"/test\")\n",
							"\n",
							"print(\"starting mount\")\n",
							"\n",
							"mssparkutils.fs.mount(  \n",
							"    f\"abfss://{containerName}@{storageAccountName}.dfs.core.windows.net/{path}\",  \n",
							"    \"/test\",  \n",
							"    {\"accountKey\":\"2GAsDUhfVC6iKvE3mSWylpAQx6LuqFrstjS/zaxobkM7jj4IB8+f1+Sh2x6wQv5nSQtSiUql8vSf+AStui8BGg==\"}\n",
							") "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"jobId = mssparkutils.env.getJobId() \n",
							"print(jobId)\n",
							"mssparkutils.fs.ls(f\"synfs:/{jobId}/test\")\n",
							"\n",
							"f = open(f\"/synfs/{jobId}/test/myFile.txt\", \"a\") \n",
							"\n",
							"f.write(\"Hello world. test2\") \n",
							"f.close() "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os\n",
							" \n",
							"# Get the list of all files and directories\n",
							"path = \"/\"\n",
							"dir_list = os.listdir(path)\n",
							" \n",
							"print(\"Files and directories in '\", path, \"' :\")\n",
							" \n",
							"# prints all files\n",
							"print(dir_list)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/readparqblobpython')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d269d3a0-7ce7-460f-86ce-61f7706dc421"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.read.load('abfss://rz-container@dpi30testeusdlsarz01.dfs.core.windows.net/Pricing/dj_test/Result/part-00000-19310851-4916-45fb-aa30-d6ab11238d49-c000.snappy.parquet', format='parquet')\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pythontest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/python"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "29538979-636f-43e9-a00d-2b3298bdfba5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"print(\"hi\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scalatest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/scala"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8f8e7226-2a91-40e2-a397-48f3b8d743d4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"print(\"hi\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ECRparser')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/python"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7f29c5e0-1e8f-4457-b352-eba826e36efd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"response,id=\"\",\"\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(response)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import json\n",
							"j=json.loads(response.replace('\\\\',''))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"d={\n",
							"    \"id\":id,\n",
							"    \"registration_number\": j[\"registration_number\"],\n",
							"    \"cmr_gbg\": j[\"cmr_gbg\"],\n",
							"    \"cmr_number\": j[\"cmr_number\"],\n",
							"    \"customer_name\": j[\"customer_name\"],\n",
							"    \"customer_sensitive\": j[\"customer_sensitive\"],\n",
							"    \"category\": j[\"category\"],\n",
							"    \"type_name\": j[\"type_name\"],\n",
							"    \"iso_country_code\": j[\"iso_country_code\"],\n",
							"    \"country_name\": j[\"country_name\"],\n",
							"    \"language_code\": j[\"language_code\"],\n",
							"    \"language_name\": j[\"language_name\"]\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"Formated json {}\".format(d))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.exit(str(d))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/git-pull')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cf6300d7-6912-4836-bcc1-45025f951421"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false
							}
						},
						"source": [
							"import git\n",
							"import os\n",
							"\n",
							"# my_repo = git.Repo.clone_from('https://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@github.kyndryl.net/srjayant/Azure-environment.git', 'with-ssh-key-repo2')\n",
							"\n",
							"# if my_repo.is_dirty(untracked_files=True):\n",
							"#     print('Changes detected.')\n",
							"\n",
							"\n",
							"directory = os.getcwd()\n",
							"print(os.listdir('with-ssh-key-repo2'))\n",
							"\n",
							"g = git.cmd.Git('with-ssh-key-repo2')\n",
							"g.pull()\n",
							"\n",
							"print(os.listdir('with-ssh-key-repo2'))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jdbc_connection')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Michal"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ETLChapterSPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "57129fdf-e975-408d-8996-e42c11c8c905"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/ETLChapterSPool",
						"name": "ETLChapterSPool",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ETLChapterSPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"user = \"\"\r\n",
							"password = \"\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"jdbcUrl = \"jdbc:sqlserver://dpi30-test-eus-syn-01.sql.azuresynapse.net:1433;\"\r\n",
							"jdbcUrl += \"database=AdamDvorak;user=\" + user + \"@dpi30-test-eus-syn-01;password=\" + password\r\n",
							"jdbcUrl += \";encrypt=true;trustServerCertificate=false;loginTimeout=30;\"\r\n",
							"pushdown_query = \"(select * from IZ_EAM_VAULT_NC.WEEKS) as weeks\"\r\n",
							"df = spark.read.jdbc(url=jdbcUrl, table=pushdown_query)\r\n",
							"display(df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test_librarires')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Michal"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ETLChapterSPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f917bf17-ca4a-42d8-b9c7-acd082315350"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/ETLChapterSPool",
						"name": "ETLChapterSPool",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ETLChapterSPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pre-installed library list: https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-3-runtime\r\n",
							"\r\n",
							"how to install custome packages: https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-manage-python-packages"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import sys\r\n",
							"sys.version"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datamonkstestss-scala-packagetest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "testing import of 3rd party packages in synnapse",
				"folder": {
					"name": "datamonkstestss"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5d70b26e-2c28-40a3-916d-54db8d57f667"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Readme me - importing maven packages in azure synapse\n",
							"\n",
							"https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-manage-scala-packages\n",
							"\n",
							"1) Download the necessery jars from maven\n",
							"2) Upload it to workspace - manage -> workspace package -> Upload\n",
							"3) Add the uploaded package to spark pool - manage -> apache spark pool -> settings of inndividual spark pools -> packages -> refresh workspace section -> select package -> apply -> restart session."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"\n",
							"//import net.liftweb.json.JsonDSL._\n",
							"import net.liftweb.json._\n",
							"\n",
							"\n",
							"\n",
							"implicit val formats = DefaultFormats\n",
							"case class Mailserver(url: String, username: String, password: String)\n",
							"\n",
							"val json = parse(\n",
							"\"\"\"\n",
							"{ \n",
							"\"url\": \"imap.yahoo.com\",\n",
							"\"username\": \"myusername\",\n",
							"\"password\": \"mypassword\"\n",
							"}\n",
							"\"\"\"\n",
							")\n",
							"\n",
							"val m = json.extract[Mailserver]\n",
							"println(m.url)\n",
							"println(m.username)\n",
							"println(m.password)\n",
							"println(\"Success\")\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadAndSendData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "97c6b70b-1e84-416e-8e4b-1f5fdf431fff"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"val input =\"\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**To pass external paramters to Notepad**\n",
							"- Create a variable Eg:input\n",
							"- Convert it into parameters ie., hover over >> ck on \"...\" > Toggle parameters\n",
							"- While creating pipeline >New Notebooks >  settings > Add this notebook > baseparamters > \"input\" - string - abcd\n",
							"- Settings > baseparamters > set the variable to required Value"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"println(input)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Ref https://aboutdataai.com.au/2021/07/05/azure-synapse-notebooks-pass-parameter-and-return-output/\n",
							"\n",
							" **mssparkutils is equivalent to Dbutils of Databricks**\n",
							"```\n",
							"from notebookutils import mssparkutils\n",
							"```\n",
							" **Return**  \n",
							" \n",
							"```\n",
							"mssparkutils.notebook.exit(\"Data\")\n",
							"```"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.exit(\"sending some data\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"The return value can be accessed in pipeline :\n",
							"```\n",
							"@activity('NotebookName').output.status.Output.result.exitValue\n",
							"```"
						],
						"attachments": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SendDataFrame')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7be61a95-90ca-4834-afe1-92a734444735"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val df = List.range(1,5).toDF()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.help()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"for i in range(1,10):print(i)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"List.range(1,10).foreach(println(_))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.exit(df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Requests')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/python"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a7da45fb-672b-42c4-b7c5-74f4c3a6e86f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import requests"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"https://eci-staging.us-south.containers.appdomain.cloud/auth/authenticate\"\n",
							"payload = \"8ks7b2wDRB6wvZxGbXvuBMELtqMrMZEmmJpnZ29YQKhae\" # Key here \n",
							"headers = {'Content-Type': 'text/plain'}\n",
							"response=requests.post(url=url,headers=headers,data=payload)\n",
							"token = response.text\n",
							"print(token)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"https://eci-staging.us-south.containers.appdomain.cloud/api/v1/documents/61730a4e5037b730896bbd7a\"\n",
							"payload = {}\n",
							"headers = {\n",
							"  'Accept': 'application/json',\n",
							"  'Authorization': 'Bearer '+token \n",
							"}\n",
							"response = requests.get(url, headers=headers, data = payload)\n",
							"data = response.json()[\"_source\"][\"metadata\"]\n",
							"print(data)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"from pyspark.sql import *\n",
							"df = spark.read.json(sc.parallelize([data]))\n",
							"df.show(n=20, truncate=False, vertical=False)\n",
							"# from pyspark.sql.types import *\n",
							"# account_name = \"name of account\"\n",
							"# container_name = \"name of container\"\n",
							"# relative_path = \"name of file path\"    #abfss://<container_name>@<storage_account_name>.dfs.core.windows.net/<path>\n",
							"# adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
							"# spark.conf.set('fs.%s@%s.dfs.core.windows.net/%s' % (container_name, account_name), \"account_key\") #not sure I'm doing the configuration right\n",
							"# df.write.mode(\"overwrite\").json(adls_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import json"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# j = json.loads(raw_data)\n",
							"# filteredData = j[\"_source\"][\"metadata\"]\n",
							"# print(filteredData)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.exit(json.dumps(data))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestKyndrylJar')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/scala"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "94aa9e27-2f87-4478-91c3-f0246410cca0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import com.kyndryltest.emojitest.EmojiLib"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"new EmojiLib().help()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"new EmojiLib().convert(\"An :grinning:awesome :smiley:string &#128516;with a few :wink:emojis!\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/deltaLakeDemoPart1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SampleSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8d9792a0-eb46-4def-af8a-3a27964c2c7d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/SampleSpark",
						"name": "SampleSpark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Notebook Configuration"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(spark.conf.get(\"spark.executor.instances\"))\r\n",
							"print(spark.conf.get(\"spark.executor.cores\"))\r\n",
							"print(spark.conf.get(\"spark.executor.memory\"))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Note: If you request more number of vcores than  pool limit or available vcores in the pool, you will get an exception. Try reducing the numbers of vcores requested or increasing your pool size."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%configure -f \r\n",
							"{\r\n",
							"    \"numExecutors\": 4, \r\n",
							"    \"executorCores\": 4,\r\n",
							"    \"executorMemory\": \"28g\"\r\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(spark.conf.get(\"spark.executor.instances\"))\r\n",
							"print(spark.conf.get(\"spark.executor.cores\"))\r\n",
							"print(spark.conf.get(\"spark.executor.memory\"))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-autoscale#get-started"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%configure -f\r\n",
							"    {\r\n",
							"        \"conf\" : {\r\n",
							"            \"spark.dynamicAllocation.enable\": \"true\",\r\n",
							"            \"spark.dynamicAllocation.minExecutors\": \"2\",\r\n",
							"            \"spark.dynamicAllocation.maxExecutors\" : \"6\"                        \r\n",
							"     }\r\n",
							"    }"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Prepare data"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"start_date = parser.parse('2010-01-01')\r\n",
							"end_date = parser.parse('2010-02-28')\r\n",
							"\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()\r\n",
							"\r\n",
							"# nyc_tlc_df_clean = nyc_tlc_df.drop_duplicates()\r\n",
							"nyc_tlc_df_clean = nyc_tlc_df.drop_duplicates().repartition(32)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Converting Parquet to Delta"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"nyc_tlc_df_clean.write.mode(\"overwrite\").format(\"parquet\").save(\"/data/deltademo/parquettbl\")\r\n",
							"nyc_tlc_df_clean.write.mode(\"overwrite\").format(\"parquet\").partitionBy(\"puYear\",\"puMonth\").save(\"/data/deltademo/partitionedparquettbl\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {}
						},
						"source": [
							"from delta.tables import *\r\n",
							"# Convert unpartitioned Parquet table at path '<path-to-table>'\r\n",
							"deltaTable = DeltaTable.convertToDelta(spark, \"parquet.`/data/deltademo/parquettbl`\")\r\n",
							"\r\n",
							"# Convert partitioned parquet table at path '<path-to-table>' and partitioned by columns with data type, separated by comma\r\n",
							"partitionedDeltaTable = DeltaTable.convertToDelta(spark, \"parquet.`/data/deltademo/partitionedparquettbl`\", \"puYear int, puMonth int\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"-- Convert unpartitioned Parquet table at path '<path-to-table>'\r\n",
							"CONVERT TO DELTA parquet.`/data/deltademo/parquettbl`;\r\n",
							"\r\n",
							"-- Convert partitioned Parquet table at path '<path-to-table>' and partitioned by columns with data type, separated by comma\r\n",
							"CONVERT TO DELTA parquet.`/data/deltademo/partitionedparquettbl` PARTITIONED BY (puYear int, puMonth int);"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Working with Dataframe"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Creating managed delta tables\r\n",
							"# nyc_tlc_df_clean.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"deltademo.deltataxitrips\")\r\n",
							"# nyc_tlc_df_clean.write.mode(\"overwrite\").format(\"delta\").partitionBy(\"puYear\",\"puMonth\").saveAsTable(\"deltademo.deltapartitionedtaxitrips\")\r\n",
							"\r\n",
							"# Creating delta path/files\r\n",
							"nyc_tlc_df_clean.write.mode(\"overwrite\").format(\"delta\").save(\"/data/deltademo/deltataxitrips\")\r\n",
							"nyc_tlc_df_clean.write.mode(\"overwrite\").format(\"delta\").partitionBy(\"puYear\",\"puMonth\").save(\"/data/deltademo/deltapartitionedtaxitrips\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DROP DATABASE IF EXISTS deltademo CASCADE;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS deltademo\")\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS deltademo.deltataxitrips USING DELTA LOCATION '{0}'\".format(\"/data/deltademo/deltataxitrips\")) \r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS deltademo.deltapartitionedtaxitrips USING DELTA LOCATION '{0}'\".format(\"/data/deltademo/deltapartitionedtaxitrips\")) "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE DATABASE IF NOT EXISTS deltademo;\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS deltademo.deltataxitrips\r\n",
							"USING DELTA\r\n",
							"LOCATION '/data/deltademo/deltataxitrips';\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS deltademo.deltapartitionedtaxitrips\r\n",
							"USING DELTA\r\n",
							"LOCATION '/data/deltademo/deltapartitionedtaxitrips';"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DESCRIBE deltademo.deltataxitrips;\r\n",
							"DESCRIBE DETAIL deltademo.deltataxitrips;\r\n",
							"\r\n",
							"DESCRIBE deltademo.deltapartitionedtaxitrips;\r\n",
							"DESCRIBE DETAIL deltademo.deltapartitionedtaxitrips;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Data Merge"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT puYear, puMonth, count(*)\r\n",
							"FROM deltademo.deltapartitionedtaxitrips \r\n",
							"GROUP BY puYear, puMonth;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"start_date = parser.parse('2010-02-01')\r\n",
							"end_date = parser.parse('2010-03-31')\r\n",
							"nyc_tlc_incr = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"nyc_tlc_incr_df = nyc_tlc_incr.to_spark_dataframe()\r\n",
							"\r\n",
							"nyc_tlc_incr_df_clean = nyc_tlc_incr_df.drop_duplicates().repartition(32)\r\n",
							"nyc_tlc_incr_df_clean.createOrReplaceTempView(\"deltaincrementaltaxitrips\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"MERGE INTO deltademo.deltapartitionedtaxitrips target\r\n",
							"USING deltaincrementaltaxitrips source\r\n",
							"ON \r\n",
							"  source.vendorID = target.vendorID AND source.tpepPickupDateTime = target.tpepPickupDateTime \r\n",
							"  AND source.tpepDropoffDateTime = target.tpepDropoffDateTime AND source.startLat = target.startLat \r\n",
							"  AND source.startLon = target.startLon AND source.endLat = target.endLat AND source.endLon = target.endLon \r\n",
							"  AND source.passengerCount = target.passengerCount AND source.tripDistance = target.tripDistance \r\n",
							"  AND source.rateCodeId = target.rateCodeId AND source.paymentType = target.paymentType \r\n",
							"  AND source.totalAmount = target.totalAmount\r\n",
							"  AND target.puYear IN (2010) AND target.puMonth IN (2,3) -- Partition Pruning \r\n",
							"WHEN MATCHED THEN\r\n",
							"  UPDATE SET \r\n",
							"    target.puLocationId = source.puLocationId\r\n",
							"    , target.doLocationId = source.doLocationId\r\n",
							"    , target.storeAndFwdFlag = source.storeAndFwdFlag\r\n",
							"    , target.fareAmount = source.fareAmount\r\n",
							"    , target.extra = source.extra\r\n",
							"    , target.mtaTax = source.mtaTax\r\n",
							"    , target.improvementSurcharge = source.improvementSurcharge\r\n",
							"    , target.tipAmount = source.tipAmount\r\n",
							"    , target.tollsAmount = source.tollsAmount\r\n",
							"WHEN NOT MATCHED\r\n",
							"  THEN INSERT (\r\n",
							"    target.vendorID, target.tpepPickupDateTime, target.tpepDropoffDateTime, target.passengerCount, target.tripDistance,\r\n",
							"    target.puLocationId, target.doLocationId, target.startLon, target.startLat, target.endLon, target.endLat, target.rateCodeId,\r\n",
							"    target.storeAndFwdFlag, target.paymentType, target.fareAmount, target.extra, target.mtaTax, target.improvementSurcharge, target.tipAmount,\r\n",
							"    target.tollsAmount, target.totalAmount, target.puYear, target.puMonth)   \r\n",
							" VALUES (\r\n",
							"   source.vendorID, source.tpepPickupDateTime, source.tpepDropoffDateTime, source.passengerCount, source.tripDistance,\r\n",
							"   source.puLocationId, source.doLocationId, source.startLon, source.startLat, source.endLon, source.endLat, source.rateCodeId, \r\n",
							"   source.storeAndFwdFlag, source.paymentType, source.fareAmount, source.extra, source.mtaTax, source.improvementSurcharge, source.tipAmount, \r\n",
							"   source.tollsAmount, source.totalAmount, source.puYear, source.puMonth)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT puYear, puMonth, count(*)\r\n",
							"FROM deltademo.deltapartitionedtaxitrips \r\n",
							"GROUP BY puYear, puMonth\r\n",
							"ORDER BY puYear, puMonth;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\r\n",
							"\r\n",
							"deltaTable = DeltaTable.forPath(spark, \"/data/events/\")\r\n",
							"\r\n",
							"deltaTable.alias(\"events\").merge(\r\n",
							"    updatesDF.alias(\"updates\"),\r\n",
							"    \"events.eventId = updates.eventId\") \\\r\n",
							"  .whenMatchedUpdate(set = { \"data\" : \"updates.data\" } ) \\\r\n",
							"  .whenNotMatchedInsert(values =\r\n",
							"    {\r\n",
							"      \"date\": \"updates.date\",\r\n",
							"      \"eventId\": \"updates.eventId\",\r\n",
							"      \"data\": \"updates.data\"\r\n",
							"    }\r\n",
							"  ) \\\r\n",
							"  .execute()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Time Travel - History of changes"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DELETE FROM deltademo.deltapartitionedtaxitrips\r\n",
							"WHERE puYear = 2010 AND puMonth = 1;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT puYear, puMonth, count(*)\r\n",
							"FROM deltademo.deltapartitionedtaxitrips \r\n",
							"GROUP BY puYear, puMonth\r\n",
							"ORDER BY puYear, puMonth;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--DESCRIBE HISTORY deltademo.deltapartitionedtaxitrips; -- LIMIT 1;  -- get the last operation only\r\n",
							"DESCRIBE HISTORY delta.`/data/deltademo/deltapartitionedtaxitrips`; "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from delta.tables import *\r\n",
							"deltapartitionedtaxitrips = DeltaTable.forPath(spark, '/data/deltademo/deltapartitionedtaxitrips')\r\n",
							"display(deltapartitionedtaxitrips.history())"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"deltapartitionedtaxitrips = spark.read.format(\"delta\").option(\"versionAsOf\", 1).load(\"/data/deltademo/deltapartitionedtaxitrips\")  \r\n",
							"display(deltapartitionedtaxitrips.groupBy(\"puYear\",\"puMonth\").count())"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"deltapartitionedtaxitrips = spark.read.format(\"delta\").option(\"timestampAsOf\", '2021-11-19 20:25:55.87').load(\"/data/deltademo/deltapartitionedtaxitrips\")  \r\n",
							"display(deltapartitionedtaxitrips.groupBy(\"puYear\",\"puMonth\").count())"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## VACCUM - Maintaining history of past data"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- vacuum files not required by versions older than the default retention period\r\n",
							"VACUUM deltademo.deltapartitionedtaxitrips;\r\n",
							"\r\n",
							"-- vacuum files in path-based table\r\n",
							"VACUUM '/data/deltademo/deltapartitionedtaxitrips'; \r\n",
							"VACUUM delta.`/data/deltademo/deltapartitionedtaxitrips`;\r\n",
							"\r\n",
							"-- vacuum files not required by versions more than 720 hours (30 days) old\r\n",
							"VACUUM delta.`/data/deltademo/deltapartitionedtaxitrips` RETAIN 720 HOURS;\r\n",
							"\r\n",
							" -- do dry run to get the list of files to be deleted\r\n",
							"VACUUM deltademo.deltapartitionedtaxitrips DRY RUN;"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\r\n",
							"\r\n",
							"deltaTable = DeltaTable.forPath(spark, '/data/deltademo/deltapartitionedtaxitrips')  # path-based tables, or\r\n",
							"deltaTable = DeltaTable.forName(spark, 'deltademo.deltapartitionedtaxitrips')    # Hive metastore-based tables\r\n",
							"\r\n",
							"deltaTable.vacuum(720)     # vacuum files not required by versions more than 720 hours (30 days) old\r\n",
							"\r\n",
							"deltaTable.vacuum()        # vacuum files not required by versions older than the default retention period"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## File Compaction"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"path = \"/data/deltademo/deltapartitionedtaxitrips\"\r\n",
							"partition = \"puYear = '2010' and puMonth = '3'\"\r\n",
							"numFilesPerPartition = 16\r\n",
							"\r\n",
							"(spark.read\r\n",
							" .format(\"delta\")\r\n",
							" .load(path)\r\n",
							" .where(partition)\r\n",
							" .repartition(numFilesPerPartition)\r\n",
							" .write\r\n",
							" .option(\"dataChange\", \"false\")\r\n",
							" .format(\"delta\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .option(\"replaceWhere\", partition)\r\n",
							" .save(path))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Convert a Delta table to a Parquet table\r\n",
							"\r\n",
							"You can easily convert a Delta table back to a Parquet table using the following steps:\r\n",
							"\r\n",
							"If you have performed Delta Lake operations that can change the data files (for example, delete or merge), run vacuum with retention of 0 hours to delete all data files that do not belong to the latest version of the table.\r\n",
							"Delete the _delta_log directory in the table directory.\r\n",
							"\r\n",
							"**NOTE: **Delta Lake has a safety check to prevent you from running a dangerous vacuum command. If you are certain that there are no operations being performed on this table that take longer than the retention interval you plan to specify, you can turn off this safety check by setting the Apache Spark configuration property spark.databricks.delta.retentionDurationCheck.enabled to false. You must choose an interval that is longer than the longest running concurrent transaction and the longest period that any stream can lag behind the most recent update to the table.\r\n",
							"\r\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\r\n",
							"\r\n",
							"deltaTable = DeltaTable.forPath(spark, '/data/deltademo/deltapartitionedtaxitrips')  # path-based tables, or\r\n",
							"deltaTable = DeltaTable.forName(spark, 'deltademo.deltapartitionedtaxitrips')    # Hive metastore-based tables\r\n",
							"\r\n",
							"deltaTable.vacuum(0)        # vacuum files not required by versions older than the default retention period"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.conf.get(\"spark.databricks.delta.retentionDurationCheck.enabled\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.conf.set(\"spark.databricks.delta.retentionDurationCheck.enabled\", \"false\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MavenJar')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/scala"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "699c6560-6c0e-4c47-8fe7-3a40d9a27b96"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"\n",
							"import net.liftweb.json._\n",
							"import net.liftweb.Serialization.write"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"hi\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"implicit val format = DefaultFormats"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"case class Address(state:String,country:String)\n",
							"case class Person(name:String,address:Address)\n",
							"println(write(Person(\"sachin\",Address(\"Kerala\",\"IN\"))))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseDDLLaunchHyperwave')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ETLChapterSPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3e74a95d-0abc-4524-8580-6af4302e4b05"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/ETLChapterSPool",
						"name": "ETLChapterSPool",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ETLChapterSPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {}
						},
						"source": [
							"\r\n",
							"import os,pyodbc\r\n",
							"#from azure.storage.blob import BlockBlobService\r\n",
							"from azure.storage.blob import BlobServiceClient, BlobClient\r\n",
							"\r\n",
							"connect_str = \"DefaultEndpointsProtocol=https;AccountName=dpi30testeusdlsacz03;AccountKey=noS/pxFw1WQ2aoBCORjXGGIO0XvSV5/58LBol+Xpcc+W++HXX9biF2fL2QShN2hVMrxyWAiUnw/s+AStxxKzZA==;EndpointSuffix=core.windows.net\"\r\n",
							"storagename = \"dpi30testeusdlsacz03\"\r\n",
							"container_name = \"bigsqltrails\"\r\n",
							"blobname = \"DDL.sql\"\r\n",
							"storagekey = \"noS/pxFw1WQ2aoBCORjXGGIO0XvSV5/58LBol+Xpcc+W++HXX9biF2fL2QShN2hVMrxyWAiUnw/s+AStxxKzZA==\"\r\n",
							"\r\n",
							"blob = BlobClient(account_url=\"https://\" + storagename + \".blob.core.windows.net\",\r\n",
							"                  container_name=container_name,\r\n",
							"                  blob_name=blobname,\r\n",
							"                  credential=storagekey)\r\n",
							"\r\n",
							"dl = blob.download_blob()\r\n",
							"sqlScriptFile = dl.content_as_text()\r\n",
							"sqlScriptSplit = sqlScriptFile.split(';')\r\n",
							"sqlScriptCount = len(sqlScriptSplit) - 2\r\n",
							"\r\n",
							"\r\n",
							"server = 'dpi30-test-eus-syn-01.sql.azuresynapse.net'\r\n",
							"database = 'AdamDvorak'\r\n",
							"username = 'sqladmin'\r\n",
							"password = '{AdamIsGoing2BeADaddy1111}'   \r\n",
							"driver= '{ODBC Driver 17 for SQL Server}'\r\n",
							"\r\n",
							"with pyodbc.connect('DRIVER='+driver+';SERVER=tcp:'+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password) as conn:\r\n",
							"     print (\"Connected!\\n\")\r\n",
							"     cursor = conn.cursor() \r\n",
							"     #cursor.execute(sqlScriptLine[1])\r\n",
							"     #for sql in range(0,sqlScriptCount):\r\n",
							"     for sql in range(0,1):\r\n",
							"         print(\"EXECUTING\\n \" + sqlScriptSplit[sql]) \r\n",
							"         cursor.execute(sqlScriptSplit[sql])\r\n",
							"         print(\"Executed\")\r\n",
							"            #with conn.cursor() as cur:\r\n",
							"     \r\n",
							"       #     print(script)\r\n",
							"      \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"  \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 20
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mixed')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "f56f28db-5873-4e9a-acb8-d8c3ced1e952"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val scala:String= \"scala\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"python:str =\"python\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"println(python)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"As per the above error , we know that the variables and data is not transferable across different languages "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"print(scala)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBostonDataset')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/python/SampleDataset"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "dc3605ec-f793-404f-9d8c-0b7f12350aa6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from azureml.opendatasets import BostonSafety\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2016-01-01')\n",
							"start_date = parser.parse('2015-05-01')\n",
							"safety = BostonSafety(start_date=start_date, end_date=end_date)\n",
							"safety = safety.to_spark_dataframe()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"safety.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UsLaborLFS Dataset')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/python/SampleDataset"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "aea84efa-8a5e-4f3b-bfd3-1aba70f1923a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"```\n",
							"https://docs.microsoft.com/en-in/azure/open-datasets/dataset-us-labor-force?tabs=azureml-opendatasets\n",
							"```"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# This is a package in preview.\n",
							"from azureml.opendatasets import UsLaborLFS\n",
							"\n",
							"labor = UsLaborLFS()\n",
							"labor_df = labor.to_spark_dataframe()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"labor_df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dpi30dj-Scala_ReadBlob')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/scala"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "c2a4c25c-7393-4ae4-8e68-5ef1eca2e8b0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Using Azure Open Datasets in Synapse - Enrich NYC Green Taxi Data with Holiday and Weather\n",
							"\n",
							"Synapse has [Azure Open Datasets](https://azure.microsoft.com/en-us/services/open-datasets/) package pre-installed. This notebook provides examples of how to enrich NYC Green Taxi Data with Holiday and Weather with focusing on :\n",
							"- read Azure Open Dataset\n",
							"- manipulate the data to prepare for further analysis, including column projection, filtering, grouping and joins etc. \n",
							"- create a Spark table to be used in other notebooks for modeling training"
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Data loading \n",
							"Let's first load the [NYC green taxi trip records](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/). The Open Datasets package contains a class representing each data source (NycTlcGreen for example) to easily filter date parameters before downloading."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Load nyc green taxi trip records from azure open dataset\n",
							"val blob_account_name = \"azureopendatastorage\"\n",
							"\n",
							"val nyc_blob_container_name = \"nyctlc\"\n",
							"val nyc_blob_relative_path = \"green\"\n",
							"val nyc_blob_sas_token = \"\"\n",
							"\n",
							"//wasbs = Windows Azure Storage Blob\n",
							"val nyc_wasbs_path = f\"wasbs://$nyc_blob_container_name@$blob_account_name.blob.core.windows.net/$nyc_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$nyc_blob_container_name.$blob_account_name.blob.core.windows.net\",nyc_blob_sas_token)\n",
							"\n",
							"\n",
							"val nyc_tlc = spark.read.parquet(nyc_wasbs_path)\n",
							"\n",
							"//nyc_tlc.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Filter data by time range\n",
							"import java.sql.Timestamp\n",
							"import org.joda.time.DateTime\n",
							"\n",
							"val end_date = new Timestamp(DateTime.parse(\"2018-06-06\").getMillis)\n",
							"val start_date = new Timestamp(DateTime.parse(\"2018-05-01\").getMillis)\n",
							"\n",
							"val nyc_tlc_df = nyc_tlc.filter((nyc_tlc(\"lpepPickupDatetime\") >= start_date) && (nyc_tlc(\"lpepPickupDatetime\") <= end_date)) \n",
							"nyc_tlc_df.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"Now that the initial data is loaded. Let's do some projection on the data to \n",
							"- create new columns for the month number, day of month, day of week, and hour of day. These info is going to be used in the training model to factor in time-based seasonality.\n",
							"- add a static feature for the country code to join holiday data. "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Extract month, day of month, and day of week from pickup datetime and add a static column for the country code to join holiday data. \n",
							"import org.apache.spark.sql.functions._\n",
							"\n",
							"val nyc_tlc_df_expand = (\n",
							"                        nyc_tlc_df.withColumn(\"datetime\", to_date(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"month_num\",month(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"day_of_month\",dayofmonth(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"day_of_week\",dayofweek(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"hour_of_day\",hour(col(\"lpepPickupDatetime\")))\n",
							"                                  .withColumn(\"country_code\",lit(\"US\"))\n",
							"                        )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Display 5 rows\n",
							"// nyc_tlc_df_expand.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"Remove some of the columns that won't need for modeling or additional feature building.\n",
							"\n",
							"\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Remove unused columns from nyc green taxi data\n",
							"val nyc_tlc_df_clean = nyc_tlc_df_expand.drop(\n",
							"                    \"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"pickupLongitude\", \n",
							"                     \"pickupLatitude\", \"dropoffLongitude\",\"dropoffLatitude\" ,\"rateCodeID\", \n",
							"                     \"storeAndFwdFlag\",\"paymentType\", \"fareAmount\", \"extra\", \"mtaTax\",\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType\" )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Display 5 rows\n",
							"nyc_tlc_df_clean.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Enrich with holiday data\n",
							"Now that we have taxi data downloaded and roughly prepared, add in holiday data as additional features. Holiday-specific features will assist model accuracy, as major holidays are times where taxi demand increases dramatically and supply becomes limited. \n",
							"\n",
							"Let's load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Load public holidays data from azure open dataset\n",
							"val hol_blob_container_name = \"holidaydatacontainer\"\n",
							"val hol_blob_relative_path = \"Processed\"\n",
							"val hol_blob_sas_token = \"\"\n",
							"\n",
							"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"\n",
							"val hol_raw = spark.read.parquet(hol_wasbs_path)\n",
							"\n",
							"// Filter data by time range\n",
							"val hol_df = hol_raw.filter((hol_raw(\"date\") >= start_date) && (hol_raw(\"date\") <= end_date))\n",
							"\n",
							"// Display 5 rows\n",
							"// hol_df.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"Rename the countryRegionCode and date columns to match the respective field names from the taxi data, and also normalize the time so it can be used as a key. "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"val hol_df_clean = (\n",
							"                hol_df.withColumnRenamed(\"countryRegionCode\",\"country_code\")\n",
							"                .withColumn(\"datetime\",to_date(col(\"date\")))\n",
							"                )\n",
							"\n",
							"hol_df_clean.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"Next, join the holiday data with the taxi data by performing a left-join. This will preserve all records from taxi data, but add in holiday data where it exists for the corresponding datetime and country_code, which in this case is always \"US\". Preview the data to verify that they were merged correctly."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// enrich taxi data with holiday data\n",
							"val nyc_taxi_holiday_df = nyc_tlc_df_clean.join(hol_df_clean, Seq(\"datetime\", \"country_code\") , \"left\")\n",
							"\n",
							"nyc_taxi_holiday_df.show(5,truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Create a temp table and filter out non empty holiday rows\n",
							"\n",
							"nyc_taxi_holiday_df.createOrReplaceTempView(\"nyc_taxi_holiday_df\")\n",
							"val result = spark.sql(\"SELECT * from nyc_taxi_holiday_df WHERE holidayName is NOT NULL \")\n",
							"result.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Enrich with weather data¶\n",
							"\n",
							"Now we append NOAA surface weather data to the taxi and holiday data. Use a similar approach to fetch the [NOAA weather history data](https://azure.microsoft.com/en-us/services/open-datasets/catalog/noaa-integrated-surface-data/) from Azure Open Datasets. "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Load weather data from azure open dataset\n",
							"val weather_blob_container_name = \"isdweatherdatacontainer\"\n",
							"val weather_blob_relative_path = \"ISDWeather/\"\n",
							"val weather_blob_sas_token = \"\"\n",
							"\n",
							"val weather_wasbs_path = f\"wasbs://$weather_blob_container_name@$blob_account_name.blob.core.windows.net/$weather_blob_relative_path\"\n",
							"spark.conf.set(f\"fs.azure.sas.$weather_blob_container_name.$blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
							"\n",
							"val isd = spark.read.parquet(weather_wasbs_path)\n",
							"\n",
							"// Display 5 rows\n",
							"// isd.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Filter data by time range\n",
							"val isd_df = isd.filter((isd(\"datetime\") >= start_date) && (isd(\"datetime\") <= end_date))\n",
							"\n",
							"// Display 5 rows\n",
							"isd_df.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Filter out weather info for new york city, remove the recording with null temperature \n",
							"\n",
							"val weather_df = (\n",
							"                isd_df.filter(isd_df(\"latitude\") >= \"40.53\")\n",
							"                        .filter(isd_df(\"latitude\") <= \"40.88\")\n",
							"                        .filter(isd_df(\"longitude\") >= \"-74.09\")\n",
							"                        .filter(isd_df(\"longitude\") <= \"-73.72\")\n",
							"                        .filter(isd_df(\"temperature\").isNotNull)\n",
							"                        .withColumnRenamed(\"datetime\",\"datetime_full\")\n",
							"                        )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Remove unused columns\n",
							"val weather_df_clean = weather_df.drop(\"usaf\", \"wban\", \"longitude\", \"latitude\").withColumn(\"datetime\", to_date(col(\"datetime_full\")))\n",
							"\n",
							"//weather_df_clean.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"Next group the weather data so that you have daily aggregated weather values. \n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Enrich weather data with aggregation statistics\n",
							"\n",
							"val weather_df_grouped = (\n",
							"                        weather_df_clean.groupBy('datetime).\n",
							"                        agg(\n",
							"                            mean('snowDepth) as \"avg_snowDepth\",\n",
							"                            max('precipTime) as \"max_precipTime\",\n",
							"                            mean('temperature) as \"avg_temperature\",\n",
							"                            max('precipDepth) as \"max_precipDepth\"\n",
							"                            )\n",
							"                        )\n",
							"\n",
							"weather_df_grouped.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"Merge the taxi and holiday data you prepared with the new weather data. This time you only need the datetime key, and again perform a left-join of the data. Run the describe() function on the new dataframe to see summary statistics for each field."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Enrich taxi data with weather\n",
							"val nyc_taxi_holiday_weather_df = nyc_taxi_holiday_df.join(weather_df_grouped, Seq(\"datetime\") ,\"left\")\n",
							"nyc_taxi_holiday_weather_df.cache()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"nyc_taxi_holiday_weather_df.show(5,truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"// Run the describe() function on the new dataframe to see summary statistics for each field.\n",
							"display(nyc_taxi_holiday_weather_df.describe())"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"The summary statistics shows that the totalAmount field has negative values, which don't make sense in the context.\n",
							"\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"// Remove invalid rows with less than 0 taxi fare or tip\n",
							"val final_df = (\n",
							"            nyc_taxi_holiday_weather_df.\n",
							"            filter(nyc_taxi_holiday_weather_df(\"tipAmount\") > 0).\n",
							"            filter(nyc_taxi_holiday_weather_df(\"totalAmount\") > 0)\n",
							"            )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Cleaning up the existing Database\n",
							"\n",
							"First we need to drop the tables since Spark requires that a database is empty before we can drop the Database.\n",
							"\n",
							"Then we recreate the database and set the default database context to it."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS NYCTaxi.nyc_taxi_holiday_weather\"); "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"spark.sql(\"DROP DATABASE IF EXISTS NYCTaxi\"); \n",
							"spark.sql(\"CREATE DATABASE NYCTaxi\"); \n",
							"spark.sql(\"USE NYCTaxi\");"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Creating a new table\n",
							"We create a nyc_taxi_holiday_weather table from the nyc_taxi_holiday_weather dataframe.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"final_df.write.saveAsTable(\"nyc_taxi_holiday_weather\");\n",
							"val final_results = spark.sql(\"SELECT COUNT(*) FROM nyc_taxi_holiday_weather\");\n",
							"final_results.show(5, truncate = false)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pythonReadOpenSourceBlob')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/python/SampleDataset"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "f6de7c21-cf42-4263-b362-91b403bbda5f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"blob_account_name = \"pandemicdatalake\"\n",
							"blob_container_name = \"public\"\n",
							"blob_relative_path = \"curated/covid-19/bing_covid-19_data/latest/bing_covid-19_data.parquet\"\n",
							"blob_sas_token = r\"\"\n",
							"# Allow SPARK to read from Blob remotely\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
							"\n",
							"\n",
							"\n",
							"spark.conf.set(\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\n",
							"    blob_sas_token)\n",
							"df = spark.read.parquet(wasbs_path)\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"```\n",
							"spark.conf.set(\"fs.azure.sas.container_name.acc_name.blob.core.windows.net\",\"\")\n",
							"\n",
							"spark.read.parquet(\"wasb://container_name@acc_name.blob.core.windows.net/path\")\n",
							"```\n",
							""
						],
						"attachments": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/KyndrylCPAJsonParser')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj/scala"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "c886b6eb-f925-4095-968e-9c097ded3271"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import src.main.scala.com.kyndryl.framework.utilities.JsonParserUtil"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"  val j = \"\"\"{1: \"ABC\" , 2:\"EFG\" }\"\"\"\n",
							"  JsonParserUtil.formatAndPrettifyJson(j)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "dpi30testeusdj"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ccc7ec18-90e5-48cc-bcb2-395c16de80b8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		}
	]
}